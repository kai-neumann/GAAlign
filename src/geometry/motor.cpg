#include "motor.h"

Eigen::Vector3d gaalign::transformPointWithMotor(const Eigen::Vector3d& point, const Motor& motor) {
    const double* motorArr = motor.data.data();
    double pointArr[4] = {-point.x(), point.y(), -point.z(), 1.0};
    double outPoint[4] = {0};

#pragma gpc begin
    // Convert motor to multivector
    M = mv_from_array(motorArr, 1, e0^e1, e0^e2, e0^e3, e1^e2, e1^e3, e2^e3, e0^e1^e2^e3);

    // Convert the point to a multivector
    P = mv_from_array(pointArr, e0^e2^e3, e0^e1^e3, e0^e1^e2, e1^e2^e3);

#pragma clucalc begin
    // Apply motor to the point
    temp = M * P * ~M;

    // Normalize point
    ?transformedPoint = temp / abs(temp);
#pragma clucalc end

    // Unpack the transformed point
    outPoint = mv_to_array(transformedPoint, e0^e2^e3, e0^e1^e3, e0^e1^e2, e1^e2^e3);

#pragma gpc end

    // Return the point as vector
    return Eigen::Vector3d(-outPoint[0], outPoint[1], -outPoint[2]);

}

void gaalign::transformPointWithMotorInPlace(Eigen::Vector3d &point, const gaalign::Motor &motor) {
    const double* motorArr = motor.data.data();
    double pointArr[4] = {-point.x(), point.y(), -point.z(), 1.0};
    double outPoint[4] = {0};

#pragma gpc begin
    // Convert motor to multivector
    M1 = mv_from_array(motorArr, 1, e0^e1, e0^e2, e0^e3, e1^e2, e1^e3, e2^e3, e0^e1^e2^e3);

    // Convert the point to a multivector
    P1 = mv_from_array(pointArr, e0^e2^e3, e0^e1^e3, e0^e1^e2, e1^e2^e3);

#pragma clucalc begin
    // Apply motor to the point
    ?temp1 = M1 * P1 * ~M1;

#pragma clucalc end

    // Unpack the transformed point
    outPoint = mv_to_array(temp1, e0^e2^e3, e0^e1^e3, e0^e1^e2, e1^e2^e3);

#pragma gpc end

    // Return the point as vector
    point.x() = -outPoint[0] / outPoint[3];
    point.y() = outPoint[1] / outPoint[3];
    point.z() = -outPoint[2] / outPoint[3];

}

void gaalign::Motor::normalize() {
    for(int i=1; i<data.size(); i++) {
        data[i] = data[i] / data[0];
    }
    data[0] = 1.0;
}

void gaalign::Motor::scale(double factor) {
    // If this is a pure bi vector (which can be created after taking the logarithm) -> Multiply all components
    if(abs(data[0]) < 1e-8) {
        for(int i=0; i<data.size(); i++) {
            data[i] = data[i]*factor;
        }
    }
    // Else we need to be careful with the homogenous component
    else {
        // Scale all components linearily except the one at index 0
        for(int i=1; i<data.size(); i++) {
            data[i] = data[i]*factor;
        }

        // Interpolate the component at 0
        data[0] = (data[0] - 1.0) * factor + 1.0;
    }


}

gaalign::Motor gaalign::Motor::identity() {
    Motor m;
    m.data[0] = 1;
    return m;
}

gaalign::Motor gaalign::Motor::join(const Motor &left, const Motor &right) {
    // Get both raw data pointers
    const double* motor1Arr = left.data.data();
    const double* motor2Arr = right.data.data();

    // Init output
    double outMotor[8] = {0.0};

#pragma gpc begin
    // Convert motor to multivector
    M1 = mv_from_array(motor1Arr, 1, e0^e1, e0^e2, e0^e3, e1^e2, e1^e3, e2^e3, e0^e1^e2^e3);
    M2 = mv_from_array(motor2Arr, 1, e0^e1, e0^e2, e0^e3, e1^e2, e1^e3, e2^e3, e0^e1^e2^e3);

#pragma clucalc begin
    // Combine both motors
    combined = M1 * M2;

    // Get the norm
    motor_norm = abs(combined);

    // Make sure the out motor is normalized
    ?normed_motor = combined/motor_norm;
#pragma clucalc end

    // Unpack the motor
    outMotor = mv_to_array(normed_motor, 1, e0^e1, e0^e2, e0^e3, e1^e2, e1^e3, e2^e3, e0^e1^e2^e3);

#pragma gpc end

    // Copy data to Motor struct
    Motor m;
    m.data = std::vector<double>(outMotor, outMotor + (sizeof outMotor / sizeof outMotor[0]));
    return m;
}

gaalign::Motor gaalign::Motor::operator+(const Motor &other) const {
    Motor result;
    for(int j=0; j<data.size(); j++) {
        result.data[j] = data[j] + other.data[j];
    }
    return result;
}

gaalign::Motor &gaalign::Motor::operator+=(const gaalign::Motor &other) {
    for(int j=0; j<data.size(); j++) {
        data[j] += other.data[j];
    }

    return *this;
}

Eigen::Matrix4d gaalign::Motor::toTransformationMatrix() const {
    // First transform the origin with the motor to get the translation
    Eigen::Vector3d translation = transformPointWithMotor(Eigen::Vector3d(0, 0, 0), *this);

    // Also transform the x, y and z axis to later form a rotation matrix
    Eigen::Vector3d xAxis = transformPointWithMotor(Eigen::Vector3d(1, 0, 0), *this);
    Eigen::Vector3d yAxis = transformPointWithMotor(Eigen::Vector3d(0, 1, 0), *this);
    Eigen::Vector3d zAxis = transformPointWithMotor(Eigen::Vector3d(0, 0, 1), *this);

    // Remove the translation component from the axes
    xAxis -= translation;
    yAxis -= translation;
    zAxis -= translation;

    // Build a 4x4 matrix from the components
    Eigen::Matrix4d mat;
    mat.block(0,0,3,1) = xAxis;
    mat.block(0,1,3,1) = yAxis;
    mat.block(0,2,3,1) = zAxis;
    mat.block(0,3,3,1) = translation;
    mat(3,3) = 1;


    return mat;
}

gaalign::Motor gaalign::Motor::inverse() const{
    // Get both raw data pointers
    const double* motorArr = data.data();

    // Init output
    double outMotor[8] = {0.0};

#pragma gpc begin
    // Convert motor to multivector
    M1 = mv_from_array(motorArr, 1, e0^e1, e0^e2, e0^e3, e1^e2, e1^e3, e2^e3, e0^e1^e2^e3);

#pragma clucalc begin
    // Combine both motors
    reverse = ~M1;

    // Get the norm
    reverse_norm = abs(reverse);

    // Make sure the out motor is normalized
    ?normed_reverse = reverse/reverse_norm;
#pragma clucalc end

    // Unpack the motor
    outMotor = mv_to_array(normed_reverse, 1, e0^e1, e0^e2, e0^e3, e1^e2, e1^e3, e2^e3, e0^e1^e2^e3);

#pragma gpc end

    // Copy data to Motor struct
    gaalign::Motor m;
    m.data = std::vector<double>(outMotor, outMotor + (sizeof outMotor / sizeof outMotor[0]));
    return m;
}



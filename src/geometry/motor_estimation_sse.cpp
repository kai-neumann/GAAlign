//
// Created by Kai on 18.04.2022.
//

#include "motor_estimation_sse.h"

void gaalign::estimateMotorFromThreeCorrespondencesSSE3(
        const std::vector<std::pair<Eigen::Vector3d, Eigen::Vector3d>>& correspondences, Motor& outputMotor) {
    // Transfer the inputs
    //assignInputsVector inputsVector = [src1_x,src1_y,src1_z,src2_x,src2_y,src2_z,src3_x,src3_y,src3_z,tar1_x,tar1_y,tar1_z,tar2_x,tar2_y,tar2_z,tar3_x,tar3_y,tar3_z];
    float inputsVector[18] = {(float) correspondences[0].first.x(), (float) correspondences[0].first.y(),
                              (float) correspondences[0].first.z(),
                              (float) correspondences[1].first.x(), (float) correspondences[1].first.y(),
                              (float) correspondences[1].first.z(),
                              (float) correspondences[2].first.x(), (float) correspondences[2].first.y(),
                              (float) correspondences[2].first.z(),
                              (float) correspondences[0].second.x(), (float) correspondences[0].second.y(),
                              (float) correspondences[0].second.z(),
                              (float) correspondences[1].second.x(), (float) correspondences[1].second.y(),
                              (float) correspondences[1].second.z(),
                              (float) correspondences[2].second.x(), (float) correspondences[2].second.y(),
                              (float) correspondences[2].second.z()};

    // Init the out motor
    double out_motor[16] = {0.0};

    // Actual Output of Max's algorithm
    {
        double A_src[16] = {0};
        double A_tar[16] = {0};
        double B2[16] = {0};
        double B_src[16] = {0};
        double B_tar[16] = {0};
        double C2[16] = {0};
        double C3[16] = {0};
        double C_src[16] = {0};
        double C_tar[16] = {0};
        double combined_motor[16] = {0};
        double L1[16] = {0};
        double L2[16] = {0};
        double motor_norm[16] = {0};
        double P1[16] = {0};
        double P2[16] = {0};
        double VA[16] = {0};
        double VA_unnormalized[16] = {0};
        double VB[16] = {0};
        double VB_norm[16] = {0};
        double VB_unnormalized[16] = {0};
        double VC[16] = {0};
        double VC_norm[16] = {0};
        double VC_unnormalized[16] = {0};

        //resetMv A_src[16];
        //setMv A_src[11,12,13] = inputsVector[-2,1,-0];
        A_src[11] = -inputsVector[2];
        A_src[12] = inputsVector[1];
        A_src[13] = -inputsVector[0];
        //resetMv B_src[16];
        //setMv B_src[11,12,13] = inputsVector[-5,4,-3];
        B_src[11] = -inputsVector[5];
        B_src[12] = inputsVector[4];
        B_src[13] = -inputsVector[3];
        //resetMv C_src[16];
        //setMv C_src[11,12,13] = inputsVector[-8,7,-6];
        C_src[11] = -inputsVector[8];
        C_src[12] = inputsVector[7];
        C_src[13] = -inputsVector[6];
        //resetMv A_tar[16];
        //setMv A_tar[11,12,13] = inputsVector[-11,10,-9];
        A_tar[11] = -inputsVector[11];
        A_tar[12] = inputsVector[10];
        A_tar[13] = -inputsVector[9];
        //resetMv B_tar[16];
        //setMv B_tar[11,12,13] = inputsVector[-14,13,-12];
        B_tar[11] = -inputsVector[14];
        B_tar[12] = inputsVector[13];
        B_tar[13] = -inputsVector[12];
        //resetMv C_tar[16];
        //setMv C_tar[11,12,13] = inputsVector[-17,16,-15];
        C_tar[11] = -inputsVector[17];
        C_tar[12] = inputsVector[16];
        C_tar[13] = -inputsVector[15];
        //resetMv VA_unnormalized[16];
        //setVector ve0 = {A_tar[13],A_src[-13]};
        //dotVectors VA_unnormalized[5] = <ve0>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(0.0, 0.0, -A_src[13], A_tar[13]);
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            VA_unnormalized[5] = _mm_cvtss_f32(v0_0);
        }
        //setVector ve1 = {A_src[12],A_tar[-12]};
        //dotVectors VA_unnormalized[6] = <ve1>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(0.0, 0.0, -A_tar[12], A_src[12]);
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            VA_unnormalized[6] = _mm_cvtss_f32(v0_0);
        }
        //setVector ve2 = {A_tar[11],A_src[-11]};
        //dotVectors VA_unnormalized[7] = <ve2>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(0.0, 0.0, -A_src[11], A_tar[11]);
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            VA_unnormalized[7] = _mm_cvtss_f32(v0_0);
        }
        //resetMv VA[16];
        //setVector ve3 = {0.5};
        //setVector ve4 = {VA_unnormalized[5]};
        //dotVectors VA[5] = <ve3,ve4>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(0.0, 0.0, 0.0, 0.5);
            v1_0 = _mm_set_ps(0.0, 0.0, 0.0, VA_unnormalized[5]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            VA[5] = _mm_cvtss_f32(v0_0);
        }
        //setVector ve5 = {0.5};
        //setVector ve6 = {VA_unnormalized[6]};
        //dotVectors VA[6] = <ve5,ve6>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(0.0, 0.0, 0.0, 0.5);
            v1_0 = _mm_set_ps(0.0, 0.0, 0.0, VA_unnormalized[6]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            VA[6] = _mm_cvtss_f32(v0_0);
        }
        //setVector ve7 = {0.5};
        //setVector ve8 = {VA_unnormalized[7]};
        //dotVectors VA[7] = <ve7,ve8>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(0.0, 0.0, 0.0, 0.5);
            v1_0 = _mm_set_ps(0.0, 0.0, 0.0, VA_unnormalized[7]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            VA[7] = _mm_cvtss_f32(v0_0);
        }
        //resetMv B2[16];
        //setVector ve9 = {2.0,B_src[11]};
        //setVector ve10 = {VA[7],1.0};
        //dotVectors B2[11] = <ve9,ve10>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(0.0, 0.0, B_src[11], 2.0);
            v1_0 = _mm_set_ps(0.0, 0.0, 1.0, VA[7]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            B2[11] = _mm_cvtss_f32(v0_0);
        }
        //setVector ve11 = {B_src[12],-2.0};
        //setVector ve12 = {1.0,VA[6]};
        //dotVectors B2[12] = <ve11,ve12>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(0.0, 0.0, -2.0, B_src[12]);
            v1_0 = _mm_set_ps(0.0, 0.0, VA[6], 1.0);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            B2[12] = _mm_cvtss_f32(v0_0);
        }
        //setVector ve13 = {2.0,B_src[13]};
        //setVector ve14 = {VA[5],1.0};
        //dotVectors B2[13] = <ve13,ve14>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(0.0, 0.0, B_src[13], 2.0);
            v1_0 = _mm_set_ps(0.0, 0.0, 1.0, VA[5]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            B2[13] = _mm_cvtss_f32(v0_0);
        }
        //resetMv C2[16];
        //setVector ve15 = {2.0,C_src[11]};
        //setVector ve16 = {VA[7],1.0};
        //dotVectors C2[11] = <ve15,ve16>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(0.0, 0.0, C_src[11], 2.0);
            v1_0 = _mm_set_ps(0.0, 0.0, 1.0, VA[7]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            C2[11] = _mm_cvtss_f32(v0_0);
        }
        //setVector ve17 = {C_src[12],-2.0};
        //setVector ve18 = {1.0,VA[6]};
        //dotVectors C2[12] = <ve17,ve18>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(0.0, 0.0, -2.0, C_src[12]);
            v1_0 = _mm_set_ps(0.0, 0.0, VA[6], 1.0);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            C2[12] = _mm_cvtss_f32(v0_0);
        }
        //setVector ve19 = {2.0,C_src[13]};
        //setVector ve20 = {VA[5],1.0};
        //dotVectors C2[13] = <ve19,ve20>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(0.0, 0.0, C_src[13], 2.0);
            v1_0 = _mm_set_ps(0.0, 0.0, 1.0, VA[5]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            C2[13] = _mm_cvtss_f32(v0_0);
        }
        //resetMv L1[16];
        //setVector ve21 = {A_tar[11,-12]};
        //setVector ve22 = {B_tar[12,11]};
        //dotVectors L1[5] = <ve21,ve22>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(0.0, 0.0, -A_tar[12], A_tar[11]);
            v1_0 = _mm_set_ps(0.0, 0.0, B_tar[11], B_tar[12]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            L1[5] = _mm_cvtss_f32(v0_0);
        }
        //setVector ve23 = {A_tar[11,-13]};
        //setVector ve24 = {B_tar[13,11]};
        //dotVectors L1[6] = <ve23,ve24>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(0.0, 0.0, -A_tar[13], A_tar[11]);
            v1_0 = _mm_set_ps(0.0, 0.0, B_tar[11], B_tar[13]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            L1[6] = _mm_cvtss_f32(v0_0);
        }
        //setVector ve25 = {A_tar[12,-13]};
        //setVector ve26 = {B_tar[13,12]};
        //dotVectors L1[7] = <ve25,ve26>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(0.0, 0.0, -A_tar[13], A_tar[12]);
            v1_0 = _mm_set_ps(0.0, 0.0, B_tar[12], B_tar[13]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            L1[7] = _mm_cvtss_f32(v0_0);
        }
        //setVector ve27 = {A_tar[11],B_tar[-11]};
        //dotVectors L1[8] = <ve27>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(0.0, 0.0, -B_tar[11], A_tar[11]);
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            L1[8] = _mm_cvtss_f32(v0_0);
        }
        //setVector ve28 = {A_tar[12],B_tar[-12]};
        //dotVectors L1[9] = <ve28>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(0.0, 0.0, -B_tar[12], A_tar[12]);
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            L1[9] = _mm_cvtss_f32(v0_0);
        }
        //setVector ve29 = {A_tar[13],B_tar[-13]};
        //dotVectors L1[10] = <ve29>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(0.0, 0.0, -B_tar[13], A_tar[13]);
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            L1[10] = _mm_cvtss_f32(v0_0);
        }
        //resetMv L2[16];
        //setVector ve30 = {A_tar[11,-12]};
        //setVector ve31 = {B2[12,11]};
        //dotVectors L2[5] = <ve30,ve31>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(0.0, 0.0, -A_tar[12], A_tar[11]);
            v1_0 = _mm_set_ps(0.0, 0.0, B2[11], B2[12]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            L2[5] = _mm_cvtss_f32(v0_0);
        }
        //setVector ve32 = {A_tar[11,-13]};
        //setVector ve33 = {B2[13,11]};
        //dotVectors L2[6] = <ve32,ve33>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(0.0, 0.0, -A_tar[13], A_tar[11]);
            v1_0 = _mm_set_ps(0.0, 0.0, B2[11], B2[13]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            L2[6] = _mm_cvtss_f32(v0_0);
        }
        //setVector ve34 = {A_tar[12,-13]};
        //setVector ve35 = {B2[13,12]};
        //dotVectors L2[7] = <ve34,ve35>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(0.0, 0.0, -A_tar[13], A_tar[12]);
            v1_0 = _mm_set_ps(0.0, 0.0, B2[12], B2[13]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            L2[7] = _mm_cvtss_f32(v0_0);
        }
        //setVector ve36 = {A_tar[11],B2[-11]};
        //dotVectors L2[8] = <ve36>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(0.0, 0.0, -B2[11], A_tar[11]);
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            L2[8] = _mm_cvtss_f32(v0_0);
        }
        //setVector ve37 = {A_tar[12],B2[-12]};
        //dotVectors L2[9] = <ve37>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(0.0, 0.0, -B2[12], A_tar[12]);
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            L2[9] = _mm_cvtss_f32(v0_0);
        }
        //setVector ve38 = {A_tar[13],B2[-13]};
        //dotVectors L2[10] = <ve38>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(0.0, 0.0, -B2[13], A_tar[13]);
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            L2[10] = _mm_cvtss_f32(v0_0);
        }
        //resetMv VB_unnormalized[16];
        //resetMv tempmv39[1];
        float tempmv39[1];
        //resetMv tempmv40[1];
        float tempmv40[1];
        //resetMv tempmv41[1];
        float tempmv41[1];
        //setMv tempmv41[0] = L2[9];
        tempmv41[0] = L2[9];
        //resetMv tempmv42[1];
        float tempmv42[1];
        //assignMv tempmv42[0] = [6.0];
        tempmv42[0] = 6.0;
        //calculateMvCoeff tempmv40[0] = EXPONENTIATION(tempmv41,tempmv42);
        tempmv40[0] = pow(tempmv41[0], tempmv42[0]);
        //resetMv tempmv43[1];
        float tempmv43[1];
        //resetMv tempmv44[1];
        float tempmv44[1];
        //setMv tempmv44[0] = L2[9];
        tempmv44[0] = L2[9];
        //resetMv tempmv45[1];
        float tempmv45[1];
        //assignMv tempmv45[0] = [5.0];
        tempmv45[0] = 5.0;
        //calculateMvCoeff tempmv43[0] = EXPONENTIATION(tempmv44,tempmv45);
        tempmv43[0] = pow(tempmv44[0], tempmv45[0]);
        //resetMv tempmv46[1];
        float tempmv46[1];
        //setVector ve47 = {3.0,L1[8],3.0,L1[10]};
        //setVector ve48 = {L2[8,8,10,10]};
        //setVector ve49 = {L2[8],1.0,L2[10],1.0};
        //dotVectors tempmv46[0] = <ve47,ve48,ve49>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(L1[10], 3.0, L1[8], 3.0);
            v1_0 = _mm_set_ps(L2[10], L2[10], L2[8], L2[8]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v1_0 = _mm_set_ps(1.0, L2[10], 1.0, L2[8]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ps(v0_0, _mm_movehl_ps(v0_0, v0_0));
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            tempmv46[0] = _mm_cvtss_f32(v0_0);
        }
        //resetMv tempmv50[1];
        float tempmv50[1];
        //resetMv tempmv51[1];
        float tempmv51[1];
        //setMv tempmv51[0] = L2[9];
        tempmv51[0] = L2[9];
        //resetMv tempmv52[1];
        float tempmv52[1];
        //assignMv tempmv52[0] = [4.0];
        tempmv52[0] = 4.0;
        //calculateMvCoeff tempmv50[0] = EXPONENTIATION(tempmv51,tempmv52);
        tempmv50[0] = pow(tempmv51[0], tempmv52[0]);
        //resetMv tempmv53[1];
        float tempmv53[1];
        //setVector ve54 = {2.0,2.0};
        //setVector ve55 = {L1[9,9]};
        //setVector ve56 = {L2[8,10]};
        //setVector ve57 = {L2[8,10]};
        //dotVectors tempmv53[0] = <ve54,ve55,ve56,ve57>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(0.0, 0.0, 2.0, 2.0);
            v1_0 = _mm_set_ps(0.0, 0.0, L1[9], L1[9]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v1_0 = _mm_set_ps(0.0, 0.0, L2[10], L2[8]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v1_0 = _mm_set_ps(0.0, 0.0, L2[10], L2[8]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            tempmv53[0] = _mm_cvtss_f32(v0_0);
        }
        //resetMv tempmv58[1];
        float tempmv58[1];
        //resetMv tempmv59[1];
        float tempmv59[1];
        //resetMv tempmv60[1];
        float tempmv60[1];
        //setMv tempmv60[0] = L2[8];
        tempmv60[0] = L2[8];
        //resetMv tempmv61[1];
        float tempmv61[1];
        //assignMv tempmv61[0] = [4.0];
        tempmv61[0] = 4.0;
        //calculateMvCoeff tempmv59[0] = EXPONENTIATION(tempmv60,tempmv61);
        tempmv59[0] = pow(tempmv60[0], tempmv61[0]);
        //resetMv tempmv62[1];
        float tempmv62[1];
        //setVector ve63 = {6.0,2.0};
        //setVector ve64 = {L2[10],L1[10]};
        //setVector ve65 = {L2[10,10]};
        //dotVectors tempmv62[0] = <ve63,ve64,ve65>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(0.0, 0.0, 2.0, 6.0);
            v1_0 = _mm_set_ps(0.0, 0.0, L1[10], L2[10]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v1_0 = _mm_set_ps(0.0, 0.0, L2[10], L2[10]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            tempmv62[0] = _mm_cvtss_f32(v0_0);
        }
        //resetMv tempmv66[1];
        float tempmv66[1];
        //resetMv tempmv67[1];
        float tempmv67[1];
        //setMv tempmv67[0] = L2[10];
        tempmv67[0] = L2[10];
        //resetMv tempmv68[1];
        float tempmv68[1];
        //assignMv tempmv68[0] = [4.0];
        tempmv68[0] = 4.0;
        //calculateMvCoeff tempmv66[0] = EXPONENTIATION(tempmv67,tempmv68);
        tempmv66[0] = pow(tempmv67[0], tempmv68[0]);
        //setVector ve69 = {3.0,2.0,tempmv62[0],2.0,3.0,2.0};
        //setVector ve70 = {tempmv59[0],L1[8],L2[8],L1[8],tempmv66[0],L1[10]};
        //setVector ve71 = {1.0,L2[8,8,10],1.0,L2[10]};
        //setVector ve72 = {1.0,L2[8],1.0,L2[10],1.0,L2[10]};
        //setVector ve73 = {1.0,L2[8],1.0,L2[8],1.0,L2[10]};
        //dotVectors tempmv58[0] = <ve69,ve70,ve71,ve72,ve73>;
        {
            __m128 v0_0, v1_0, v0_1, v1_1;
            v0_0 = _mm_set_ps(2.0, tempmv62[0], 2.0, 3.0);
            v1_0 = _mm_set_ps(L1[8], L2[8], L1[8], tempmv59[0]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v1_0 = _mm_set_ps(L2[10], L2[8], L2[8], 1.0);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v1_0 = _mm_set_ps(L2[10], 1.0, L2[8], 1.0);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v1_0 = _mm_set_ps(L2[8], 1.0, L2[8], 1.0);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_1 = _mm_set_ps(0.0, 0.0, 2.0, 3.0);
            v1_1 = _mm_set_ps(0.0, 0.0, L1[10], tempmv66[0]);
            v0_1 = _mm_mul_ps(v0_1, v1_1);
            v1_1 = _mm_set_ps(0.0, 0.0, L2[10], 1.0);
            v0_1 = _mm_mul_ps(v0_1, v1_1);
            v1_1 = _mm_set_ps(0.0, 0.0, L2[10], 1.0);
            v0_1 = _mm_mul_ps(v0_1, v1_1);
            v1_1 = _mm_set_ps(0.0, 0.0, L2[10], 1.0);
            v0_1 = _mm_mul_ps(v0_1, v1_1);
            v0_0 = _mm_add_ps(v0_0, v0_1);
            v0_0 = _mm_add_ps(v0_0, _mm_movehl_ps(v0_0, v0_0));
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            tempmv58[0] = _mm_cvtss_f32(v0_0);
        }
        //resetMv tempmv74[1];
        float tempmv74[1];
        //resetMv tempmv75[1];
        float tempmv75[1];
        //resetMv tempmv76[1];
        float tempmv76[1];
        //setMv tempmv76[0] = L2[8];
        tempmv76[0] = L2[8];
        //resetMv tempmv77[1];
        float tempmv77[1];
        //assignMv tempmv77[0] = [4.0];
        tempmv77[0] = 4.0;
        //calculateMvCoeff tempmv75[0] = EXPONENTIATION(tempmv76,tempmv77);
        tempmv75[0] = pow(tempmv76[0], tempmv77[0]);
        //resetMv tempmv78[1];
        float tempmv78[1];
        //resetMv tempmv79[1];
        float tempmv79[1];
        //setMv tempmv79[0] = L2[10];
        tempmv79[0] = L2[10];
        //resetMv tempmv80[1];
        float tempmv80[1];
        //assignMv tempmv80[0] = [4.0];
        tempmv80[0] = 4.0;
        //calculateMvCoeff tempmv78[0] = EXPONENTIATION(tempmv79,tempmv80);
        tempmv78[0] = pow(tempmv79[0], tempmv80[0]);
        //setVector ve81 = {L1[9],2.0,L1[9]};
        //setVector ve82 = {tempmv75[0],L1[9],tempmv78[0]};
        //setVector ve83 = {1.0,L2[10],1.0};
        //setVector ve84 = {1.0,L2[10],1.0};
        //setVector ve85 = {1.0,L2[8],1.0};
        //setVector ve86 = {1.0,L2[8],1.0};
        //dotVectors tempmv74[0] = <ve81,ve82,ve83,ve84,ve85,ve86>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(0.0, L1[9], 2.0, L1[9]);
            v1_0 = _mm_set_ps(0.0, tempmv78[0], L1[9], tempmv75[0]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v1_0 = _mm_set_ps(0.0, 1.0, L2[10], 1.0);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v1_0 = _mm_set_ps(0.0, 1.0, L2[10], 1.0);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v1_0 = _mm_set_ps(0.0, 1.0, L2[8], 1.0);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v1_0 = _mm_set_ps(0.0, 1.0, L2[8], 1.0);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ps(v0_0, _mm_movehl_ps(v0_0, v0_0));
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            tempmv74[0] = _mm_cvtss_f32(v0_0);
        }
        //resetMv tempmv87[1];
        float tempmv87[1];
        //resetMv tempmv88[1];
        float tempmv88[1];
        //setMv tempmv88[0] = L2[8];
        tempmv88[0] = L2[8];
        //resetMv tempmv89[1];
        float tempmv89[1];
        //assignMv tempmv89[0] = [6.0];
        tempmv89[0] = 6.0;
        //calculateMvCoeff tempmv87[0] = EXPONENTIATION(tempmv88,tempmv89);
        tempmv87[0] = pow(tempmv88[0], tempmv89[0]);
        //resetMv tempmv90[1];
        float tempmv90[1];
        //resetMv tempmv91[1];
        float tempmv91[1];
        //setMv tempmv91[0] = L2[8];
        tempmv91[0] = L2[8];
        //resetMv tempmv92[1];
        float tempmv92[1];
        //assignMv tempmv92[0] = [5.0];
        tempmv92[0] = 5.0;
        //calculateMvCoeff tempmv90[0] = EXPONENTIATION(tempmv91,tempmv92);
        tempmv90[0] = pow(tempmv91[0], tempmv92[0]);
        //resetMv tempmv93[1];
        float tempmv93[1];
        //setVector ve94 = {3.0,L1[10]};
        //setVector ve95 = {L2[10,10]};
        //setVector ve96 = {L2[10],1.0};
        //dotVectors tempmv93[0] = <ve94,ve95,ve96>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(0.0, 0.0, L1[10], 3.0);
            v1_0 = _mm_set_ps(0.0, 0.0, L2[10], L2[10]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v1_0 = _mm_set_ps(0.0, 0.0, 1.0, L2[10]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            tempmv93[0] = _mm_cvtss_f32(v0_0);
        }
        //resetMv tempmv97[1];
        float tempmv97[1];
        //resetMv tempmv98[1];
        float tempmv98[1];
        //setMv tempmv98[0] = L2[8];
        tempmv98[0] = L2[8];
        //resetMv tempmv99[1];
        float tempmv99[1];
        //assignMv tempmv99[0] = [4.0];
        tempmv99[0] = 4.0;
        //calculateMvCoeff tempmv97[0] = EXPONENTIATION(tempmv98,tempmv99);
        tempmv97[0] = pow(tempmv98[0], tempmv99[0]);
        //resetMv tempmv100[1];
        float tempmv100[1];
        //resetMv tempmv101[1];
        float tempmv101[1];
        //resetMv tempmv102[1];
        float tempmv102[1];
        //setMv tempmv102[0] = L2[10];
        tempmv102[0] = L2[10];
        //resetMv tempmv103[1];
        float tempmv103[1];
        //assignMv tempmv103[0] = [4.0];
        tempmv103[0] = 4.0;
        //calculateMvCoeff tempmv101[0] = EXPONENTIATION(tempmv102,tempmv103);
        tempmv101[0] = pow(tempmv102[0], tempmv103[0]);
        //setVector ve104 = {3.0,2.0};
        //setVector ve105 = {tempmv101[0],L1[10]};
        //setVector ve106 = {1.0,L2[10]};
        //setVector ve107 = {1.0,L2[10]};
        //setVector ve108 = {1.0,L2[10]};
        //dotVectors tempmv100[0] = <ve104,ve105,ve106,ve107,ve108>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(0.0, 0.0, 2.0, 3.0);
            v1_0 = _mm_set_ps(0.0, 0.0, L1[10], tempmv101[0]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v1_0 = _mm_set_ps(0.0, 0.0, L2[10], 1.0);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v1_0 = _mm_set_ps(0.0, 0.0, L2[10], 1.0);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v1_0 = _mm_set_ps(0.0, 0.0, L2[10], 1.0);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            tempmv100[0] = _mm_cvtss_f32(v0_0);
        }
        //resetMv tempmv109[1];
        float tempmv109[1];
        //resetMv tempmv110[1];
        float tempmv110[1];
        //setMv tempmv110[0] = L2[10];
        tempmv110[0] = L2[10];
        //resetMv tempmv111[1];
        float tempmv111[1];
        //assignMv tempmv111[0] = [4.0];
        tempmv111[0] = 4.0;
        //calculateMvCoeff tempmv109[0] = EXPONENTIATION(tempmv110,tempmv111);
        tempmv109[0] = pow(tempmv110[0], tempmv111[0]);
        //resetMv tempmv112[1];
        float tempmv112[1];
        //resetMv tempmv113[1];
        float tempmv113[1];
        //setMv tempmv113[0] = L2[10];
        tempmv113[0] = L2[10];
        //resetMv tempmv114[1];
        float tempmv114[1];
        //assignMv tempmv114[0] = [6.0];
        tempmv114[0] = 6.0;
        //calculateMvCoeff tempmv112[0] = EXPONENTIATION(tempmv113,tempmv114);
        tempmv112[0] = pow(tempmv113[0], tempmv114[0]);
        //resetMv tempmv115[1];
        float tempmv115[1];
        //resetMv tempmv116[1];
        float tempmv116[1];
        //setMv tempmv116[0] = L2[10];
        tempmv116[0] = L2[10];
        //resetMv tempmv117[1];
        float tempmv117[1];
        //assignMv tempmv117[0] = [5.0];
        tempmv117[0] = 5.0;
        //calculateMvCoeff tempmv115[0] = EXPONENTIATION(tempmv116,tempmv117);
        tempmv115[0] = pow(tempmv116[0], tempmv117[0]);
        //setVector ve118 = {tempmv40[0],L1[9],tempmv46[0],tempmv53[0],tempmv58[0],tempmv74[0],tempmv87[0],L1[8],tempmv93[0],2.0,tempmv100[0],L1[8],tempmv112[0],L1[10]};
        //setVector ve119 = {1.0,tempmv43[0],tempmv50[0],L2[9,9,9],1.0,tempmv90[0],tempmv97[0],L1[8],L2[8],tempmv109[0],1.0,tempmv115[0]};
        //setVector ve120 = {1.0,1.0,1.0,L2[9,9],1.0,1.0,1.0,1.0,L2[10,8,8],1.0,1.0};
        //setVector ve121 = {1.0,1.0,1.0,L2[9],1.0,1.0,1.0,1.0,1.0,L2[10],1.0,1.0,1.0,1.0};
        //setVector ve122 = {1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,L2[8],1.0,1.0,1.0,1.0};
        //setVector ve123 = {1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,L2[8],1.0,1.0,1.0,1.0};
        //setVector ve124 = {1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,L2[8],1.0,1.0,1.0,1.0};
        //dotVectors tempmv39[0] = <ve118,ve119,ve120,ve121,ve122,ve123,ve124>;
        {
            __m128 v0_0, v1_0, v0_1, v1_1, v0_2, v1_2, v0_3, v1_3;
            v0_0 = _mm_set_ps(tempmv53[0], tempmv46[0], L1[9], tempmv40[0]);
            v1_0 = _mm_set_ps(L2[9], tempmv50[0], tempmv43[0], 1.0);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v1_0 = _mm_set_ps(L2[9], 1.0, 1.0, 1.0);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v1_0 = _mm_set_ps(L2[9], 1.0, 1.0, 1.0);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v1_0 = _mm_set_ps(1.0, 1.0, 1.0, 1.0);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v1_0 = _mm_set_ps(1.0, 1.0, 1.0, 1.0);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v1_0 = _mm_set_ps(1.0, 1.0, 1.0, 1.0);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_1 = _mm_set_ps(L1[8], tempmv87[0], tempmv74[0], tempmv58[0]);
            v1_1 = _mm_set_ps(tempmv90[0], 1.0, L2[9], L2[9]);
            v0_1 = _mm_mul_ps(v0_1, v1_1);
            v1_1 = _mm_set_ps(1.0, 1.0, 1.0, L2[9]);
            v0_1 = _mm_mul_ps(v0_1, v1_1);
            v1_1 = _mm_set_ps(1.0, 1.0, 1.0, 1.0);
            v0_1 = _mm_mul_ps(v0_1, v1_1);
            v1_1 = _mm_set_ps(1.0, 1.0, 1.0, 1.0);
            v0_1 = _mm_mul_ps(v0_1, v1_1);
            v1_1 = _mm_set_ps(1.0, 1.0, 1.0, 1.0);
            v0_1 = _mm_mul_ps(v0_1, v1_1);
            v1_1 = _mm_set_ps(1.0, 1.0, 1.0, 1.0);
            v0_1 = _mm_mul_ps(v0_1, v1_1);
            v0_2 = _mm_set_ps(L1[8], tempmv100[0], 2.0, tempmv93[0]);
            v1_2 = _mm_set_ps(tempmv109[0], L2[8], L1[8], tempmv97[0]);
            v0_2 = _mm_mul_ps(v0_2, v1_2);
            v1_2 = _mm_set_ps(L2[8], L2[8], L2[10], 1.0);
            v0_2 = _mm_mul_ps(v0_2, v1_2);
            v1_2 = _mm_set_ps(1.0, 1.0, L2[10], 1.0);
            v0_2 = _mm_mul_ps(v0_2, v1_2);
            v1_2 = _mm_set_ps(1.0, 1.0, L2[8], 1.0);
            v0_2 = _mm_mul_ps(v0_2, v1_2);
            v1_2 = _mm_set_ps(1.0, 1.0, L2[8], 1.0);
            v0_2 = _mm_mul_ps(v0_2, v1_2);
            v1_2 = _mm_set_ps(1.0, 1.0, L2[8], 1.0);
            v0_2 = _mm_mul_ps(v0_2, v1_2);
            v0_3 = _mm_set_ps(0.0, 0.0, L1[10], tempmv112[0]);
            v1_3 = _mm_set_ps(0.0, 0.0, tempmv115[0], 1.0);
            v0_3 = _mm_mul_ps(v0_3, v1_3);
            v1_3 = _mm_set_ps(0.0, 0.0, 1.0, 1.0);
            v0_3 = _mm_mul_ps(v0_3, v1_3);
            v1_3 = _mm_set_ps(0.0, 0.0, 1.0, 1.0);
            v0_3 = _mm_mul_ps(v0_3, v1_3);
            v1_3 = _mm_set_ps(0.0, 0.0, 1.0, 1.0);
            v0_3 = _mm_mul_ps(v0_3, v1_3);
            v1_3 = _mm_set_ps(0.0, 0.0, 1.0, 1.0);
            v0_3 = _mm_mul_ps(v0_3, v1_3);
            v1_3 = _mm_set_ps(0.0, 0.0, 1.0, 1.0);
            v0_3 = _mm_mul_ps(v0_3, v1_3);
            v0_0 = _mm_add_ps(v0_0, v0_3);
            v0_0 = _mm_add_ps(v0_0, v0_2);
            v0_0 = _mm_add_ps(v0_0, v0_1);
            v0_0 = _mm_add_ps(v0_0, _mm_movehl_ps(v0_0, v0_0));
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            tempmv39[0] = _mm_cvtss_f32(v0_0);
        }
        //resetMv tempmv125[1];
        float tempmv125[1];
        //resetMv tempmv126[1];
        float tempmv126[1];
        //resetMv tempmv127[1];
        float tempmv127[1];
        //setMv tempmv127[0] = L2[9];
        tempmv127[0] = L2[9];
        //resetMv tempmv128[1];
        float tempmv128[1];
        //assignMv tempmv128[0] = [6.0];
        tempmv128[0] = 6.0;
        //calculateMvCoeff tempmv126[0] = EXPONENTIATION(tempmv127,tempmv128);
        tempmv126[0] = pow(tempmv127[0], tempmv128[0]);
        //resetMv tempmv129[1];
        float tempmv129[1];
        //setVector ve130 = {3.0,3.0};
        //setVector ve131 = {L2[8,10]};
        //setVector ve132 = {L2[8,10]};
        //dotVectors tempmv129[0] = <ve130,ve131,ve132>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(0.0, 0.0, 3.0, 3.0);
            v1_0 = _mm_set_ps(0.0, 0.0, L2[10], L2[8]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v1_0 = _mm_set_ps(0.0, 0.0, L2[10], L2[8]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            tempmv129[0] = _mm_cvtss_f32(v0_0);
        }
        //resetMv tempmv133[1];
        float tempmv133[1];
        //resetMv tempmv134[1];
        float tempmv134[1];
        //setMv tempmv134[0] = L2[9];
        tempmv134[0] = L2[9];
        //resetMv tempmv135[1];
        float tempmv135[1];
        //assignMv tempmv135[0] = [4.0];
        tempmv135[0] = 4.0;
        //calculateMvCoeff tempmv133[0] = EXPONENTIATION(tempmv134,tempmv135);
        tempmv133[0] = pow(tempmv134[0], tempmv135[0]);
        //resetMv tempmv136[1];
        float tempmv136[1];
        //resetMv tempmv137[1];
        float tempmv137[1];
        //resetMv tempmv138[1];
        float tempmv138[1];
        //setMv tempmv138[0] = L2[8];
        tempmv138[0] = L2[8];
        //resetMv tempmv139[1];
        float tempmv139[1];
        //assignMv tempmv139[0] = [4.0];
        tempmv139[0] = 4.0;
        //calculateMvCoeff tempmv137[0] = EXPONENTIATION(tempmv138,tempmv139);
        tempmv137[0] = pow(tempmv138[0], tempmv139[0]);
        //resetMv tempmv140[1];
        float tempmv140[1];
        //resetMv tempmv141[1];
        float tempmv141[1];
        //setMv tempmv141[0] = L2[10];
        tempmv141[0] = L2[10];
        //resetMv tempmv142[1];
        float tempmv142[1];
        //assignMv tempmv142[0] = [4.0];
        tempmv142[0] = 4.0;
        //calculateMvCoeff tempmv140[0] = EXPONENTIATION(tempmv141,tempmv142);
        tempmv140[0] = pow(tempmv141[0], tempmv142[0]);
        //setVector ve143 = {3.0,6.0,3.0};
        //setVector ve144 = {tempmv137[0],L2[10],tempmv140[0]};
        //setVector ve145 = {1.0,L2[10],1.0};
        //setVector ve146 = {1.0,L2[8],1.0};
        //setVector ve147 = {1.0,L2[8],1.0};
        //dotVectors tempmv136[0] = <ve143,ve144,ve145,ve146,ve147>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(0.0, 3.0, 6.0, 3.0);
            v1_0 = _mm_set_ps(0.0, tempmv140[0], L2[10], tempmv137[0]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v1_0 = _mm_set_ps(0.0, 1.0, L2[10], 1.0);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v1_0 = _mm_set_ps(0.0, 1.0, L2[8], 1.0);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v1_0 = _mm_set_ps(0.0, 1.0, L2[8], 1.0);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ps(v0_0, _mm_movehl_ps(v0_0, v0_0));
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            tempmv136[0] = _mm_cvtss_f32(v0_0);
        }
        //resetMv tempmv148[1];
        float tempmv148[1];
        //resetMv tempmv149[1];
        float tempmv149[1];
        //setMv tempmv149[0] = L2[8];
        tempmv149[0] = L2[8];
        //resetMv tempmv150[1];
        float tempmv150[1];
        //assignMv tempmv150[0] = [6.0];
        tempmv150[0] = 6.0;
        //calculateMvCoeff tempmv148[0] = EXPONENTIATION(tempmv149,tempmv150);
        tempmv148[0] = pow(tempmv149[0], tempmv150[0]);
        //resetMv tempmv151[1];
        float tempmv151[1];
        //resetMv tempmv152[1];
        float tempmv152[1];
        //setMv tempmv152[0] = L2[8];
        tempmv152[0] = L2[8];
        //resetMv tempmv153[1];
        float tempmv153[1];
        //assignMv tempmv153[0] = [4.0];
        tempmv153[0] = 4.0;
        //calculateMvCoeff tempmv151[0] = EXPONENTIATION(tempmv152,tempmv153);
        tempmv151[0] = pow(tempmv152[0], tempmv153[0]);
        //resetMv tempmv154[1];
        float tempmv154[1];
        //resetMv tempmv155[1];
        float tempmv155[1];
        //setMv tempmv155[0] = L2[10];
        tempmv155[0] = L2[10];
        //resetMv tempmv156[1];
        float tempmv156[1];
        //assignMv tempmv156[0] = [4.0];
        tempmv156[0] = 4.0;
        //calculateMvCoeff tempmv154[0] = EXPONENTIATION(tempmv155,tempmv156);
        tempmv154[0] = pow(tempmv155[0], tempmv156[0]);
        //resetMv tempmv157[1];
        float tempmv157[1];
        //resetMv tempmv158[1];
        float tempmv158[1];
        //setMv tempmv158[0] = L2[10];
        tempmv158[0] = L2[10];
        //resetMv tempmv159[1];
        float tempmv159[1];
        //assignMv tempmv159[0] = [6.0];
        tempmv159[0] = 6.0;
        //calculateMvCoeff tempmv157[0] = EXPONENTIATION(tempmv158,tempmv159);
        tempmv157[0] = pow(tempmv158[0], tempmv159[0]);
        //setVector ve160 = {tempmv126[0],tempmv129[0],tempmv136[0],tempmv148[0],3.0,3.0,tempmv157[0]};
        //setVector ve161 = {1.0,tempmv133[0],L2[9],1.0,L2[10],tempmv154[0],1.0};
        //setVector ve162 = {1.0,1.0,L2[9],1.0,L2[10,8],1.0};
        //setVector ve163 = {1.0,1.0,1.0,1.0,tempmv151[0],L2[8],1.0};
        //dotVectors tempmv125[0] = <ve160,ve161,ve162,ve163>;
        {
            __m128 v0_0, v1_0, v0_1, v1_1;
            v0_0 = _mm_set_ps(tempmv148[0], tempmv136[0], tempmv129[0], tempmv126[0]);
            v1_0 = _mm_set_ps(1.0, L2[9], tempmv133[0], 1.0);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v1_0 = _mm_set_ps(1.0, L2[9], 1.0, 1.0);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v1_0 = _mm_set_ps(1.0, 1.0, 1.0, 1.0);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_1 = _mm_set_ps(0.0, tempmv157[0], 3.0, 3.0);
            v1_1 = _mm_set_ps(0.0, 1.0, tempmv154[0], L2[10]);
            v0_1 = _mm_mul_ps(v0_1, v1_1);
            v1_1 = _mm_set_ps(0.0, 1.0, L2[8], L2[10]);
            v0_1 = _mm_mul_ps(v0_1, v1_1);
            v1_1 = _mm_set_ps(0.0, 1.0, L2[8], tempmv151[0]);
            v0_1 = _mm_mul_ps(v0_1, v1_1);
            v0_0 = _mm_add_ps(v0_0, v0_1);
            v0_0 = _mm_add_ps(v0_0, _mm_movehl_ps(v0_0, v0_0));
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            tempmv125[0] = _mm_cvtss_f32(v0_0);
        }
        //resetMv tempmv164[1];
        float tempmv164[1];
        //setMv tempmv164[0] = tempmv39[0];
        tempmv164[0] = tempmv39[0];
        //resetMv tempmv165[1];
        float tempmv165[1];
        //setMv tempmv165[0] = tempmv125[0];
        tempmv165[0] = tempmv125[0];
        //calculateMvCoeff VB_unnormalized[0] = DIVISION(tempmv164,tempmv165);
        VB_unnormalized[0] = tempmv164[0] / tempmv165[0];
        //resetMv tempmv166[1];
        float tempmv166[1];
        //setVector ve167 = {L1[7,6,-9,-8]};
        //setVector ve168 = {L2[9,8,7,6]};
        //dotVectors tempmv166[0] = <ve167,ve168>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(-L1[8], -L1[9], L1[6], L1[7]);
            v1_0 = _mm_set_ps(L2[6], L2[7], L2[8], L2[9]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ps(v0_0, _mm_movehl_ps(v0_0, v0_0));
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            tempmv166[0] = _mm_cvtss_f32(v0_0);
        }
        //resetMv tempmv169[1];
        float tempmv169[1];
        //setVector ve170 = {L2[9,8,10]};
        //setVector ve171 = {L2[9,8,10]};
        //dotVectors tempmv169[0] = <ve170,ve171>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(0.0, L2[10], L2[8], L2[9]);
            v1_0 = _mm_set_ps(0.0, L2[10], L2[8], L2[9]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ps(v0_0, _mm_movehl_ps(v0_0, v0_0));
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            tempmv169[0] = _mm_cvtss_f32(v0_0);
        }
        //resetMv tempmv172[1];
        float tempmv172[1];
        //setMv tempmv172[0] = tempmv166[0];
        tempmv172[0] = tempmv166[0];
        //resetMv tempmv173[1];
        float tempmv173[1];
        //setMv tempmv173[0] = tempmv169[0];
        tempmv173[0] = tempmv169[0];
        //calculateMvCoeff VB_unnormalized[5] = DIVISION(tempmv172,tempmv173);
        VB_unnormalized[5] = tempmv172[0] / tempmv173[0];
        //resetMv tempmv174[1];
        float tempmv174[1];
        //resetMv tempmv175[1];
        float tempmv175[1];
        //setVector ve176 = {L1[5,10,-8,-7]};
        //setVector ve177 = {L2[8,7,5,10]};
        //dotVectors tempmv175[0] = <ve176,ve177>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(-L1[7], -L1[8], L1[10], L1[5]);
            v1_0 = _mm_set_ps(L2[10], L2[5], L2[7], L2[8]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ps(v0_0, _mm_movehl_ps(v0_0, v0_0));
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            tempmv175[0] = _mm_cvtss_f32(v0_0);
        }
        //setMv tempmv174[0] = tempmv175[-0];
        tempmv174[0] = -tempmv175[0];
        //resetMv tempmv178[1];
        float tempmv178[1];
        //setVector ve179 = {L2[9,8,10]};
        //setVector ve180 = {L2[9,8,10]};
        //dotVectors tempmv178[0] = <ve179,ve180>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(0.0, L2[10], L2[8], L2[9]);
            v1_0 = _mm_set_ps(0.0, L2[10], L2[8], L2[9]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ps(v0_0, _mm_movehl_ps(v0_0, v0_0));
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            tempmv178[0] = _mm_cvtss_f32(v0_0);
        }
        //resetMv tempmv181[1];
        float tempmv181[1];
        //setMv tempmv181[0] = tempmv174[0];
        tempmv181[0] = tempmv174[0];
        //resetMv tempmv182[1];
        float tempmv182[1];
        //setMv tempmv182[0] = tempmv178[0];
        tempmv182[0] = tempmv178[0];
        //calculateMvCoeff VB_unnormalized[6] = DIVISION(tempmv181,tempmv182);
        VB_unnormalized[6] = tempmv181[0] / tempmv182[0];
        //resetMv tempmv183[1];
        float tempmv183[1];
        //resetMv tempmv184[1];
        float tempmv184[1];
        //setVector ve185 = {L1[5,-10,-9,6]};
        //setVector ve186 = {L2[9,6,5,10]};
        //dotVectors tempmv184[0] = <ve185,ve186>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(L1[6], -L1[9], -L1[10], L1[5]);
            v1_0 = _mm_set_ps(L2[10], L2[5], L2[6], L2[9]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ps(v0_0, _mm_movehl_ps(v0_0, v0_0));
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            tempmv184[0] = _mm_cvtss_f32(v0_0);
        }
        //setMv tempmv183[0] = tempmv184[-0];
        tempmv183[0] = -tempmv184[0];
        //resetMv tempmv187[1];
        float tempmv187[1];
        //setVector ve188 = {L2[9,8,10]};
        //setVector ve189 = {L2[9,8,10]};
        //dotVectors tempmv187[0] = <ve188,ve189>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(0.0, L2[10], L2[8], L2[9]);
            v1_0 = _mm_set_ps(0.0, L2[10], L2[8], L2[9]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ps(v0_0, _mm_movehl_ps(v0_0, v0_0));
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            tempmv187[0] = _mm_cvtss_f32(v0_0);
        }
        //resetMv tempmv190[1];
        float tempmv190[1];
        //setMv tempmv190[0] = tempmv183[0];
        tempmv190[0] = tempmv183[0];
        //resetMv tempmv191[1];
        float tempmv191[1];
        //setMv tempmv191[0] = tempmv187[0];
        tempmv191[0] = tempmv187[0];
        //calculateMvCoeff VB_unnormalized[7] = DIVISION(tempmv190,tempmv191);
        VB_unnormalized[7] = tempmv190[0] / tempmv191[0];
        //resetMv tempmv192[1];
        float tempmv192[1];
        //resetMv tempmv193[1];
        float tempmv193[1];
        //setVector ve194 = {L1[10,-9]};
        //setVector ve195 = {L2[9,10]};
        //dotVectors tempmv193[0] = <ve194,ve195>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(0.0, 0.0, -L1[9], L1[10]);
            v1_0 = _mm_set_ps(0.0, 0.0, L2[10], L2[9]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            tempmv193[0] = _mm_cvtss_f32(v0_0);
        }
        //setMv tempmv192[0] = tempmv193[-0];
        tempmv192[0] = -tempmv193[0];
        //resetMv tempmv196[1];
        float tempmv196[1];
        //setVector ve197 = {L2[9,8,10]};
        //setVector ve198 = {L2[9,8,10]};
        //dotVectors tempmv196[0] = <ve197,ve198>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(0.0, L2[10], L2[8], L2[9]);
            v1_0 = _mm_set_ps(0.0, L2[10], L2[8], L2[9]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ps(v0_0, _mm_movehl_ps(v0_0, v0_0));
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            tempmv196[0] = _mm_cvtss_f32(v0_0);
        }
        //resetMv tempmv199[1];
        float tempmv199[1];
        //setMv tempmv199[0] = tempmv192[0];
        tempmv199[0] = tempmv192[0];
        //resetMv tempmv200[1];
        float tempmv200[1];
        //setMv tempmv200[0] = tempmv196[0];
        tempmv200[0] = tempmv196[0];
        //calculateMvCoeff VB_unnormalized[8] = DIVISION(tempmv199,tempmv200);
        VB_unnormalized[8] = tempmv199[0] / tempmv200[0];
        //resetMv tempmv201[1];
        float tempmv201[1];
        //setVector ve202 = {L1[10,-8]};
        //setVector ve203 = {L2[8,10]};
        //dotVectors tempmv201[0] = <ve202,ve203>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(0.0, 0.0, -L1[8], L1[10]);
            v1_0 = _mm_set_ps(0.0, 0.0, L2[10], L2[8]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            tempmv201[0] = _mm_cvtss_f32(v0_0);
        }
        //resetMv tempmv204[1];
        float tempmv204[1];
        //setVector ve205 = {L2[9,8,10]};
        //setVector ve206 = {L2[9,8,10]};
        //dotVectors tempmv204[0] = <ve205,ve206>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(0.0, L2[10], L2[8], L2[9]);
            v1_0 = _mm_set_ps(0.0, L2[10], L2[8], L2[9]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ps(v0_0, _mm_movehl_ps(v0_0, v0_0));
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            tempmv204[0] = _mm_cvtss_f32(v0_0);
        }
        //resetMv tempmv207[1];
        float tempmv207[1];
        //setMv tempmv207[0] = tempmv201[0];
        tempmv207[0] = tempmv201[0];
        //resetMv tempmv208[1];
        float tempmv208[1];
        //setMv tempmv208[0] = tempmv204[0];
        tempmv208[0] = tempmv204[0];
        //calculateMvCoeff VB_unnormalized[9] = DIVISION(tempmv207,tempmv208);
        VB_unnormalized[9] = tempmv207[0] / tempmv208[0];
        //resetMv tempmv209[1];
        float tempmv209[1];
        //setVector ve210 = {L1[8,-9]};
        //setVector ve211 = {L2[9,8]};
        //dotVectors tempmv209[0] = <ve210,ve211>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(0.0, 0.0, -L1[9], L1[8]);
            v1_0 = _mm_set_ps(0.0, 0.0, L2[8], L2[9]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            tempmv209[0] = _mm_cvtss_f32(v0_0);
        }
        //resetMv tempmv212[1];
        float tempmv212[1];
        //setVector ve213 = {L2[9,8,10]};
        //setVector ve214 = {L2[9,8,10]};
        //dotVectors tempmv212[0] = <ve213,ve214>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(0.0, L2[10], L2[8], L2[9]);
            v1_0 = _mm_set_ps(0.0, L2[10], L2[8], L2[9]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ps(v0_0, _mm_movehl_ps(v0_0, v0_0));
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            tempmv212[0] = _mm_cvtss_f32(v0_0);
        }
        //resetMv tempmv215[1];
        float tempmv215[1];
        //setMv tempmv215[0] = tempmv209[0];
        tempmv215[0] = tempmv209[0];
        //resetMv tempmv216[1];
        float tempmv216[1];
        //setMv tempmv216[0] = tempmv212[0];
        tempmv216[0] = tempmv212[0];
        //calculateMvCoeff VB_unnormalized[10] = DIVISION(tempmv215,tempmv216);
        VB_unnormalized[10] = tempmv215[0] / tempmv216[0];
        //resetMv tempmv217[1];
        float tempmv217[1];
        //setVector ve218 = {L1[6,-7,-8,9,-10,-5]};
        //setVector ve219 = {L2[9,8,7,6,5,10]};
        //dotVectors tempmv217[0] = <ve218,ve219>;
        {
            __m128 v0_0, v1_0, v0_1, v1_1;
            v0_0 = _mm_set_ps(L1[9], -L1[8], -L1[7], L1[6]);
            v1_0 = _mm_set_ps(L2[6], L2[7], L2[8], L2[9]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_1 = _mm_set_ps(0.0, 0.0, -L1[5], -L1[10]);
            v1_1 = _mm_set_ps(0.0, 0.0, L2[10], L2[5]);
            v0_1 = _mm_mul_ps(v0_1, v1_1);
            v0_0 = _mm_add_ps(v0_0, v0_1);
            v0_0 = _mm_add_ps(v0_0, _mm_movehl_ps(v0_0, v0_0));
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            tempmv217[0] = _mm_cvtss_f32(v0_0);
        }
        //resetMv tempmv220[1];
        float tempmv220[1];
        //setVector ve221 = {L2[9,8,10]};
        //setVector ve222 = {L2[9,8,10]};
        //dotVectors tempmv220[0] = <ve221,ve222>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(0.0, L2[10], L2[8], L2[9]);
            v1_0 = _mm_set_ps(0.0, L2[10], L2[8], L2[9]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ps(v0_0, _mm_movehl_ps(v0_0, v0_0));
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            tempmv220[0] = _mm_cvtss_f32(v0_0);
        }
        //resetMv tempmv223[1];
        float tempmv223[1];
        //setMv tempmv223[0] = tempmv217[0];
        tempmv223[0] = tempmv217[0];
        //resetMv tempmv224[1];
        float tempmv224[1];
        //setMv tempmv224[0] = tempmv220[0];
        tempmv224[0] = tempmv220[0];
        //calculateMvCoeff VB_unnormalized[15] = DIVISION(tempmv223,tempmv224);
        VB_unnormalized[15] = tempmv223[0] / tempmv224[0];
        //resetMv VB_norm[16];
        //resetMv tempmv225[1];
        float tempmv225[1];
        //setVector ve226 = {VB_unnormalized[9,8,10,0]};
        //setVector ve227 = {VB_unnormalized[9,8,10,0]};
        //dotVectors tempmv225[0] = <ve226,ve227>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(VB_unnormalized[0], VB_unnormalized[10], VB_unnormalized[8], VB_unnormalized[9]);
            v1_0 = _mm_set_ps(VB_unnormalized[0], VB_unnormalized[10], VB_unnormalized[8], VB_unnormalized[9]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ps(v0_0, _mm_movehl_ps(v0_0, v0_0));
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            tempmv225[0] = _mm_cvtss_f32(v0_0);
        }
        //resetMv tempmv228[1];
        float tempmv228[1];
        //setMv tempmv228[0] = tempmv225[0];
        tempmv228[0] = tempmv225[0];
        //calculateMvCoeff VB_norm[0] = SQRT(tempmv228);
        VB_norm[0] = sqrt(tempmv228[0]);
        //resetMv VB[16];
        //resetMv tempmv229[1];
        float tempmv229[1];
        //setMv tempmv229[0] = VB_unnormalized[0];
        tempmv229[0] = VB_unnormalized[0];
        //resetMv tempmv230[1];
        float tempmv230[1];
        //setMv tempmv230[0] = VB_norm[0];
        tempmv230[0] = VB_norm[0];
        //calculateMvCoeff VB[0] = DIVISION(tempmv229,tempmv230);
        VB[0] = tempmv229[0] / tempmv230[0];
        //resetMv tempmv231[1];
        float tempmv231[1];
        //setMv tempmv231[0] = VB_unnormalized[5];
        tempmv231[0] = VB_unnormalized[5];
        //resetMv tempmv232[1];
        float tempmv232[1];
        //setMv tempmv232[0] = VB_norm[0];
        tempmv232[0] = VB_norm[0];
        //calculateMvCoeff VB[5] = DIVISION(tempmv231,tempmv232);
        VB[5] = tempmv231[0] / tempmv232[0];
        //resetMv tempmv233[1];
        float tempmv233[1];
        //setMv tempmv233[0] = VB_unnormalized[6];
        tempmv233[0] = VB_unnormalized[6];
        //resetMv tempmv234[1];
        float tempmv234[1];
        //setMv tempmv234[0] = VB_norm[0];
        tempmv234[0] = VB_norm[0];
        //calculateMvCoeff VB[6] = DIVISION(tempmv233,tempmv234);
        VB[6] = tempmv233[0] / tempmv234[0];
        //resetMv tempmv235[1];
        float tempmv235[1];
        //setMv tempmv235[0] = VB_unnormalized[7];
        tempmv235[0] = VB_unnormalized[7];
        //resetMv tempmv236[1];
        float tempmv236[1];
        //setMv tempmv236[0] = VB_norm[0];
        tempmv236[0] = VB_norm[0];
        //calculateMvCoeff VB[7] = DIVISION(tempmv235,tempmv236);
        VB[7] = tempmv235[0] / tempmv236[0];
        //resetMv tempmv237[1];
        float tempmv237[1];
        //setMv tempmv237[0] = VB_unnormalized[8];
        tempmv237[0] = VB_unnormalized[8];
        //resetMv tempmv238[1];
        float tempmv238[1];
        //setMv tempmv238[0] = VB_norm[0];
        tempmv238[0] = VB_norm[0];
        //calculateMvCoeff VB[8] = DIVISION(tempmv237,tempmv238);
        VB[8] = tempmv237[0] / tempmv238[0];
        //resetMv tempmv239[1];
        float tempmv239[1];
        //setMv tempmv239[0] = VB_unnormalized[9];
        tempmv239[0] = VB_unnormalized[9];
        //resetMv tempmv240[1];
        float tempmv240[1];
        //setMv tempmv240[0] = VB_norm[0];
        tempmv240[0] = VB_norm[0];
        //calculateMvCoeff VB[9] = DIVISION(tempmv239,tempmv240);
        VB[9] = tempmv239[0] / tempmv240[0];
        //resetMv tempmv241[1];
        float tempmv241[1];
        //setMv tempmv241[0] = VB_unnormalized[10];
        tempmv241[0] = VB_unnormalized[10];
        //resetMv tempmv242[1];
        float tempmv242[1];
        //setMv tempmv242[0] = VB_norm[0];
        tempmv242[0] = VB_norm[0];
        //calculateMvCoeff VB[10] = DIVISION(tempmv241,tempmv242);
        VB[10] = tempmv241[0] / tempmv242[0];
        //resetMv tempmv243[1];
        float tempmv243[1];
        //setMv tempmv243[0] = VB_unnormalized[15];
        tempmv243[0] = VB_unnormalized[15];
        //resetMv tempmv244[1];
        float tempmv244[1];
        //setMv tempmv244[0] = VB_norm[0];
        tempmv244[0] = VB_norm[0];
        //calculateMvCoeff VB[15] = DIVISION(tempmv243,tempmv244);
        VB[15] = tempmv243[0] / tempmv244[0];
        //resetMv C3[16];
        //resetMv tempmv245[1];
        float tempmv245[1];
        //setVector ve246 = {2.0,-2.0,-2.0};
        //setVector ve247 = {C2[12],VB[5],C2[13]};
        //setVector ve248 = {VB[8],1.0,VB[0]};
        //dotVectors tempmv245[0] = <ve246,ve247,ve248>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(0.0, -2.0, -2.0, 2.0);
            v1_0 = _mm_set_ps(0.0, C2[13], VB[5], C2[12]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v1_0 = _mm_set_ps(0.0, VB[0], 1.0, VB[8]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ps(v0_0, _mm_movehl_ps(v0_0, v0_0));
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            tempmv245[0] = _mm_cvtss_f32(v0_0);
        }
        //resetMv tempmv249[1];
        float tempmv249[1];
        //setVector ve250 = {2.0,2.0};
        //setVector ve251 = {VB[15],C2[13]};
        //setVector ve252 = {1.0,VB[10]};
        //dotVectors tempmv249[0] = <ve250,ve251,ve252>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(0.0, 0.0, 2.0, 2.0);
            v1_0 = _mm_set_ps(0.0, 0.0, C2[13], VB[15]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v1_0 = _mm_set_ps(0.0, 0.0, VB[10], 1.0);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            tempmv249[0] = _mm_cvtss_f32(v0_0);
        }
        //setVector ve253 = {C2[-11],tempmv245[0],C2[11],tempmv249[0],2.0,-2.0,C2[-11],2.0,C2[11]};
        //setVector ve254 = {VB[9,9,8,8,0,10,10],C2[12],VB[0]};
        //setVector ve255 = {VB[9],1.0,VB[8],1.0,VB[7,6,10,0,0]};
        //setVector ve256 = {1.0,1.0,1.0,1.0,1.0,1.0,1.0,VB[10],1.0};
        //dotVectors C3[11] = <ve253,ve254,ve255,ve256>;
        {
            __m128 v0_0, v1_0, v0_1, v1_1, v0_2, v1_2;
            v0_0 = _mm_set_ps(tempmv249[0], C2[11], tempmv245[0], -C2[11]);
            v1_0 = _mm_set_ps(VB[8], VB[8], VB[9], VB[9]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v1_0 = _mm_set_ps(1.0, VB[8], 1.0, VB[9]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v1_0 = _mm_set_ps(1.0, 1.0, 1.0, 1.0);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_1 = _mm_set_ps(2.0, -C2[11], -2.0, 2.0);
            v1_1 = _mm_set_ps(C2[12], VB[10], VB[10], VB[0]);
            v0_1 = _mm_mul_ps(v0_1, v1_1);
            v1_1 = _mm_set_ps(VB[0], VB[10], VB[6], VB[7]);
            v0_1 = _mm_mul_ps(v0_1, v1_1);
            v1_1 = _mm_set_ps(VB[10], 1.0, 1.0, 1.0);
            v0_1 = _mm_mul_ps(v0_1, v1_1);
            v0_2 = _mm_set_ps(0.0, 0.0, 0.0, C2[11]);
            v1_2 = _mm_set_ps(0.0, 0.0, 0.0, VB[0]);
            v0_2 = _mm_mul_ps(v0_2, v1_2);
            v1_2 = _mm_set_ps(0.0, 0.0, 0.0, VB[0]);
            v0_2 = _mm_mul_ps(v0_2, v1_2);
            v1_2 = _mm_set_ps(0.0, 0.0, 0.0, 1.0);
            v0_2 = _mm_mul_ps(v0_2, v1_2);
            v0_0 = _mm_add_ps(v0_0, v0_2);
            v0_0 = _mm_add_ps(v0_0, v0_1);
            v0_0 = _mm_add_ps(v0_0, _mm_movehl_ps(v0_0, v0_0));
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            C3[11] = _mm_cvtss_f32(v0_0);
        }
        //resetMv tempmv257[1];
        float tempmv257[1];
        //setVector ve258 = {2.0,2.0,2.0};
        //setVector ve259 = {C2[11],VB[15],C2[13]};
        //setVector ve260 = {VB[8],1.0,VB[10]};
        //dotVectors tempmv257[0] = <ve258,ve259,ve260>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(0.0, 2.0, 2.0, 2.0);
            v1_0 = _mm_set_ps(0.0, C2[13], VB[15], C2[11]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v1_0 = _mm_set_ps(0.0, VB[10], 1.0, VB[8]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ps(v0_0, _mm_movehl_ps(v0_0, v0_0));
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            tempmv257[0] = _mm_cvtss_f32(v0_0);
        }
        //resetMv tempmv261[1];
        float tempmv261[1];
        //setVector ve262 = {2.0,2.0};
        //setVector ve263 = {VB[5],C2[13]};
        //setVector ve264 = {1.0,VB[0]};
        //dotVectors tempmv261[0] = <ve262,ve263,ve264>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(0.0, 0.0, 2.0, 2.0);
            v1_0 = _mm_set_ps(0.0, 0.0, C2[13], VB[5]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v1_0 = _mm_set_ps(0.0, 0.0, VB[0], 1.0);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            tempmv261[0] = _mm_cvtss_f32(v0_0);
        }
        //setVector ve265 = {C2[12],tempmv257[0],C2[-12],tempmv261[0],-2.0,-2.0,C2[-12],-2.0,C2[12]};
        //setVector ve266 = {VB[9,9,8,8,10,0,10],C2[11],VB[0]};
        //setVector ve267 = {VB[9],1.0,VB[8],1.0,VB[7,6,10,0,0]};
        //setVector ve268 = {1.0,1.0,1.0,1.0,1.0,1.0,1.0,VB[10],1.0};
        //dotVectors C3[12] = <ve265,ve266,ve267,ve268>;
        {
            __m128 v0_0, v1_0, v0_1, v1_1, v0_2, v1_2;
            v0_0 = _mm_set_ps(tempmv261[0], -C2[12], tempmv257[0], C2[12]);
            v1_0 = _mm_set_ps(VB[8], VB[8], VB[9], VB[9]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v1_0 = _mm_set_ps(1.0, VB[8], 1.0, VB[9]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v1_0 = _mm_set_ps(1.0, 1.0, 1.0, 1.0);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_1 = _mm_set_ps(-2.0, -C2[12], -2.0, -2.0);
            v1_1 = _mm_set_ps(C2[11], VB[10], VB[0], VB[10]);
            v0_1 = _mm_mul_ps(v0_1, v1_1);
            v1_1 = _mm_set_ps(VB[0], VB[10], VB[6], VB[7]);
            v0_1 = _mm_mul_ps(v0_1, v1_1);
            v1_1 = _mm_set_ps(VB[10], 1.0, 1.0, 1.0);
            v0_1 = _mm_mul_ps(v0_1, v1_1);
            v0_2 = _mm_set_ps(0.0, 0.0, 0.0, C2[12]);
            v1_2 = _mm_set_ps(0.0, 0.0, 0.0, VB[0]);
            v0_2 = _mm_mul_ps(v0_2, v1_2);
            v1_2 = _mm_set_ps(0.0, 0.0, 0.0, VB[0]);
            v0_2 = _mm_mul_ps(v0_2, v1_2);
            v1_2 = _mm_set_ps(0.0, 0.0, 0.0, 1.0);
            v0_2 = _mm_mul_ps(v0_2, v1_2);
            v0_0 = _mm_add_ps(v0_0, v0_2);
            v0_0 = _mm_add_ps(v0_0, v0_1);
            v0_0 = _mm_add_ps(v0_0, _mm_movehl_ps(v0_0, v0_0));
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            C3[12] = _mm_cvtss_f32(v0_0);
        }
        //resetMv tempmv269[1];
        float tempmv269[1];
        //setVector ve270 = {2.0,2.0,2.0};
        //setVector ve271 = {VB[7],C2[12,11]};
        //setVector ve272 = {1.0,VB[10,0]};
        //dotVectors tempmv269[0] = <ve270,ve271,ve272>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(0.0, 2.0, 2.0, 2.0);
            v1_0 = _mm_set_ps(0.0, C2[11], C2[12], VB[7]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v1_0 = _mm_set_ps(0.0, VB[0], VB[10], 1.0);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ps(v0_0, _mm_movehl_ps(v0_0, v0_0));
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            tempmv269[0] = _mm_cvtss_f32(v0_0);
        }
        //resetMv tempmv273[1];
        float tempmv273[1];
        //setVector ve274 = {2.0,2.0,-2.0};
        //setVector ve275 = {VB[6],C2[11,12]};
        //setVector ve276 = {1.0,VB[10,0]};
        //dotVectors tempmv273[0] = <ve274,ve275,ve276>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(0.0, -2.0, 2.0, 2.0);
            v1_0 = _mm_set_ps(0.0, C2[12], C2[11], VB[6]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v1_0 = _mm_set_ps(0.0, VB[0], VB[10], 1.0);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ps(v0_0, _mm_movehl_ps(v0_0, v0_0));
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            tempmv273[0] = _mm_cvtss_f32(v0_0);
        }
        //setVector ve277 = {C2[-13],tempmv269[0],C2[-13],tempmv273[0],2.0,2.0,C2[13,13]};
        //setVector ve278 = {VB[9,9,8,8,0,10,10,0]};
        //setVector ve279 = {VB[9],1.0,VB[8],1.0,VB[5,15,10,0]};
        //dotVectors C3[13] = <ve277,ve278,ve279>;
        {
            __m128 v0_0, v1_0, v0_1, v1_1;
            v0_0 = _mm_set_ps(tempmv273[0], -C2[13], tempmv269[0], -C2[13]);
            v1_0 = _mm_set_ps(VB[8], VB[8], VB[9], VB[9]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v1_0 = _mm_set_ps(1.0, VB[8], 1.0, VB[9]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_1 = _mm_set_ps(C2[13], C2[13], 2.0, 2.0);
            v1_1 = _mm_set_ps(VB[0], VB[10], VB[10], VB[0]);
            v0_1 = _mm_mul_ps(v0_1, v1_1);
            v1_1 = _mm_set_ps(VB[0], VB[10], VB[15], VB[5]);
            v0_1 = _mm_mul_ps(v0_1, v1_1);
            v0_0 = _mm_add_ps(v0_0, v0_1);
            v0_0 = _mm_add_ps(v0_0, _mm_movehl_ps(v0_0, v0_0));
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            C3[13] = _mm_cvtss_f32(v0_0);
        }
        //setVector ve280 = {VB[9,8,10,0]};
        //setVector ve281 = {VB[9,8,10,0]};
        //dotVectors C3[14] = <ve280,ve281>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(VB[0], VB[10], VB[8], VB[9]);
            v1_0 = _mm_set_ps(VB[0], VB[10], VB[8], VB[9]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ps(v0_0, _mm_movehl_ps(v0_0, v0_0));
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            C3[14] = _mm_cvtss_f32(v0_0);
        }
        //resetMv P1[16];
        //setVector ve282 = {C_tar[-11,12,-13]};
        //setVector ve283 = {L1[7,6,5]};
        //dotVectors P1[1] = <ve282,ve283>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(0.0, -C_tar[13], C_tar[12], -C_tar[11]);
            v1_0 = _mm_set_ps(0.0, L1[5], L1[6], L1[7]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ps(v0_0, _mm_movehl_ps(v0_0, v0_0));
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            P1[1] = _mm_cvtss_f32(v0_0);
        }
        //setVector ve284 = {C_tar[-11,12],L1[-5]};
        //setVector ve285 = {L1[9,8],1.0};
        //dotVectors P1[2] = <ve284,ve285>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(0.0, -L1[5], C_tar[12], -C_tar[11]);
            v1_0 = _mm_set_ps(0.0, 1.0, L1[8], L1[9]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ps(v0_0, _mm_movehl_ps(v0_0, v0_0));
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            P1[2] = _mm_cvtss_f32(v0_0);
        }
        //setVector ve286 = {C_tar[13],L1[-6],C_tar[-11]};
        //setVector ve287 = {L1[8],1.0,L1[10]};
        //dotVectors P1[3] = <ve286,ve287>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(0.0, -C_tar[11], -L1[6], C_tar[13]);
            v1_0 = _mm_set_ps(0.0, L1[10], 1.0, L1[8]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ps(v0_0, _mm_movehl_ps(v0_0, v0_0));
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            P1[3] = _mm_cvtss_f32(v0_0);
        }
        //setVector ve288 = {C_tar[13],L1[-7],C_tar[-12]};
        //setVector ve289 = {L1[9],1.0,L1[10]};
        //dotVectors P1[4] = <ve288,ve289>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(0.0, -C_tar[12], -L1[7], C_tar[13]);
            v1_0 = _mm_set_ps(0.0, L1[10], 1.0, L1[9]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ps(v0_0, _mm_movehl_ps(v0_0, v0_0));
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            P1[4] = _mm_cvtss_f32(v0_0);
        }
        //resetMv P2[16];
        //setVector ve290 = {C3[-11,12,-13]};
        //setVector ve291 = {L1[7,6,5]};
        //dotVectors P2[1] = <ve290,ve291>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(0.0, -C3[13], C3[12], -C3[11]);
            v1_0 = _mm_set_ps(0.0, L1[5], L1[6], L1[7]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ps(v0_0, _mm_movehl_ps(v0_0, v0_0));
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            P2[1] = _mm_cvtss_f32(v0_0);
        }
        //setVector ve292 = {C3[-11,12,-14]};
        //setVector ve293 = {L1[9,8,5]};
        //dotVectors P2[2] = <ve292,ve293>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(0.0, -C3[14], C3[12], -C3[11]);
            v1_0 = _mm_set_ps(0.0, L1[5], L1[8], L1[9]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ps(v0_0, _mm_movehl_ps(v0_0, v0_0));
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            P2[2] = _mm_cvtss_f32(v0_0);
        }
        //setVector ve294 = {C3[13,-14,-11]};
        //setVector ve295 = {L1[8,6,10]};
        //dotVectors P2[3] = <ve294,ve295>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(0.0, -C3[11], -C3[14], C3[13]);
            v1_0 = _mm_set_ps(0.0, L1[10], L1[6], L1[8]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ps(v0_0, _mm_movehl_ps(v0_0, v0_0));
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            P2[3] = _mm_cvtss_f32(v0_0);
        }
        //setVector ve296 = {C3[13,-14,-12]};
        //setVector ve297 = {L1[9,7,10]};
        //dotVectors P2[4] = <ve296,ve297>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(0.0, -C3[12], -C3[14], C3[13]);
            v1_0 = _mm_set_ps(0.0, L1[10], L1[7], L1[9]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ps(v0_0, _mm_movehl_ps(v0_0, v0_0));
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            P2[4] = _mm_cvtss_f32(v0_0);
        }
        //resetMv VC_unnormalized[16];
        //resetMv tempmv298[1];
        float tempmv298[1];
        //resetMv tempmv299[1];
        float tempmv299[1];
        //resetMv tempmv300[1];
        float tempmv300[1];
        //setMv tempmv300[0] = P2[4];
        tempmv300[0] = P2[4];
        //resetMv tempmv301[1];
        float tempmv301[1];
        //assignMv tempmv301[0] = [6.0];
        tempmv301[0] = 6.0;
        //calculateMvCoeff tempmv299[0] = EXPONENTIATION(tempmv300,tempmv301);
        tempmv299[0] = pow(tempmv300[0], tempmv301[0]);
        //resetMv tempmv302[1];
        float tempmv302[1];
        //resetMv tempmv303[1];
        float tempmv303[1];
        //setMv tempmv303[0] = P2[4];
        tempmv303[0] = P2[4];
        //resetMv tempmv304[1];
        float tempmv304[1];
        //assignMv tempmv304[0] = [5.0];
        tempmv304[0] = 5.0;
        //calculateMvCoeff tempmv302[0] = EXPONENTIATION(tempmv303,tempmv304);
        tempmv302[0] = pow(tempmv303[0], tempmv304[0]);
        //resetMv tempmv305[1];
        float tempmv305[1];
        //setVector ve306 = {3.0,P1[3],3.0,P1[2]};
        //setVector ve307 = {P2[3,3,2,2]};
        //setVector ve308 = {P2[3],1.0,P2[2],1.0};
        //dotVectors tempmv305[0] = <ve306,ve307,ve308>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(P1[2], 3.0, P1[3], 3.0);
            v1_0 = _mm_set_ps(P2[2], P2[2], P2[3], P2[3]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v1_0 = _mm_set_ps(1.0, P2[2], 1.0, P2[3]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ps(v0_0, _mm_movehl_ps(v0_0, v0_0));
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            tempmv305[0] = _mm_cvtss_f32(v0_0);
        }
        //resetMv tempmv309[1];
        float tempmv309[1];
        //resetMv tempmv310[1];
        float tempmv310[1];
        //setMv tempmv310[0] = P2[4];
        tempmv310[0] = P2[4];
        //resetMv tempmv311[1];
        float tempmv311[1];
        //assignMv tempmv311[0] = [4.0];
        tempmv311[0] = 4.0;
        //calculateMvCoeff tempmv309[0] = EXPONENTIATION(tempmv310,tempmv311);
        tempmv309[0] = pow(tempmv310[0], tempmv311[0]);
        //resetMv tempmv312[1];
        float tempmv312[1];
        //setVector ve313 = {2.0,2.0};
        //setVector ve314 = {P1[4,4]};
        //setVector ve315 = {P2[3,2]};
        //setVector ve316 = {P2[3,2]};
        //dotVectors tempmv312[0] = <ve313,ve314,ve315,ve316>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(0.0, 0.0, 2.0, 2.0);
            v1_0 = _mm_set_ps(0.0, 0.0, P1[4], P1[4]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v1_0 = _mm_set_ps(0.0, 0.0, P2[2], P2[3]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v1_0 = _mm_set_ps(0.0, 0.0, P2[2], P2[3]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            tempmv312[0] = _mm_cvtss_f32(v0_0);
        }
        //resetMv tempmv317[1];
        float tempmv317[1];
        //resetMv tempmv318[1];
        float tempmv318[1];
        //resetMv tempmv319[1];
        float tempmv319[1];
        //setMv tempmv319[0] = P2[3];
        tempmv319[0] = P2[3];
        //resetMv tempmv320[1];
        float tempmv320[1];
        //assignMv tempmv320[0] = [4.0];
        tempmv320[0] = 4.0;
        //calculateMvCoeff tempmv318[0] = EXPONENTIATION(tempmv319,tempmv320);
        tempmv318[0] = pow(tempmv319[0], tempmv320[0]);
        //resetMv tempmv321[1];
        float tempmv321[1];
        //setVector ve322 = {6.0,2.0};
        //setVector ve323 = {P2[2],P1[2]};
        //setVector ve324 = {P2[2,2]};
        //dotVectors tempmv321[0] = <ve322,ve323,ve324>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(0.0, 0.0, 2.0, 6.0);
            v1_0 = _mm_set_ps(0.0, 0.0, P1[2], P2[2]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v1_0 = _mm_set_ps(0.0, 0.0, P2[2], P2[2]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            tempmv321[0] = _mm_cvtss_f32(v0_0);
        }
        //resetMv tempmv325[1];
        float tempmv325[1];
        //resetMv tempmv326[1];
        float tempmv326[1];
        //setMv tempmv326[0] = P2[2];
        tempmv326[0] = P2[2];
        //resetMv tempmv327[1];
        float tempmv327[1];
        //assignMv tempmv327[0] = [4.0];
        tempmv327[0] = 4.0;
        //calculateMvCoeff tempmv325[0] = EXPONENTIATION(tempmv326,tempmv327);
        tempmv325[0] = pow(tempmv326[0], tempmv327[0]);
        //setVector ve328 = {3.0,2.0,tempmv321[0],2.0,3.0,2.0};
        //setVector ve329 = {tempmv318[0],P1[3],P2[3],P1[3],tempmv325[0],P1[2]};
        //setVector ve330 = {1.0,P2[3,3,2],1.0,P2[2]};
        //setVector ve331 = {1.0,P2[3],1.0,P2[2],1.0,P2[2]};
        //setVector ve332 = {1.0,P2[3],1.0,P2[3],1.0,P2[2]};
        //dotVectors tempmv317[0] = <ve328,ve329,ve330,ve331,ve332>;
        {
            __m128 v0_0, v1_0, v0_1, v1_1;
            v0_0 = _mm_set_ps(2.0, tempmv321[0], 2.0, 3.0);
            v1_0 = _mm_set_ps(P1[3], P2[3], P1[3], tempmv318[0]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v1_0 = _mm_set_ps(P2[2], P2[3], P2[3], 1.0);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v1_0 = _mm_set_ps(P2[2], 1.0, P2[3], 1.0);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v1_0 = _mm_set_ps(P2[3], 1.0, P2[3], 1.0);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_1 = _mm_set_ps(0.0, 0.0, 2.0, 3.0);
            v1_1 = _mm_set_ps(0.0, 0.0, P1[2], tempmv325[0]);
            v0_1 = _mm_mul_ps(v0_1, v1_1);
            v1_1 = _mm_set_ps(0.0, 0.0, P2[2], 1.0);
            v0_1 = _mm_mul_ps(v0_1, v1_1);
            v1_1 = _mm_set_ps(0.0, 0.0, P2[2], 1.0);
            v0_1 = _mm_mul_ps(v0_1, v1_1);
            v1_1 = _mm_set_ps(0.0, 0.0, P2[2], 1.0);
            v0_1 = _mm_mul_ps(v0_1, v1_1);
            v0_0 = _mm_add_ps(v0_0, v0_1);
            v0_0 = _mm_add_ps(v0_0, _mm_movehl_ps(v0_0, v0_0));
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            tempmv317[0] = _mm_cvtss_f32(v0_0);
        }
        //resetMv tempmv333[1];
        float tempmv333[1];
        //resetMv tempmv334[1];
        float tempmv334[1];
        //resetMv tempmv335[1];
        float tempmv335[1];
        //setMv tempmv335[0] = P2[3];
        tempmv335[0] = P2[3];
        //resetMv tempmv336[1];
        float tempmv336[1];
        //assignMv tempmv336[0] = [4.0];
        tempmv336[0] = 4.0;
        //calculateMvCoeff tempmv334[0] = EXPONENTIATION(tempmv335,tempmv336);
        tempmv334[0] = pow(tempmv335[0], tempmv336[0]);
        //resetMv tempmv337[1];
        float tempmv337[1];
        //resetMv tempmv338[1];
        float tempmv338[1];
        //setMv tempmv338[0] = P2[2];
        tempmv338[0] = P2[2];
        //resetMv tempmv339[1];
        float tempmv339[1];
        //assignMv tempmv339[0] = [4.0];
        tempmv339[0] = 4.0;
        //calculateMvCoeff tempmv337[0] = EXPONENTIATION(tempmv338,tempmv339);
        tempmv337[0] = pow(tempmv338[0], tempmv339[0]);
        //setVector ve340 = {P1[4],2.0,P1[4]};
        //setVector ve341 = {tempmv334[0],P1[4],tempmv337[0]};
        //setVector ve342 = {1.0,P2[2],1.0};
        //setVector ve343 = {1.0,P2[2],1.0};
        //setVector ve344 = {1.0,P2[3],1.0};
        //setVector ve345 = {1.0,P2[3],1.0};
        //dotVectors tempmv333[0] = <ve340,ve341,ve342,ve343,ve344,ve345>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(0.0, P1[4], 2.0, P1[4]);
            v1_0 = _mm_set_ps(0.0, tempmv337[0], P1[4], tempmv334[0]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v1_0 = _mm_set_ps(0.0, 1.0, P2[2], 1.0);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v1_0 = _mm_set_ps(0.0, 1.0, P2[2], 1.0);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v1_0 = _mm_set_ps(0.0, 1.0, P2[3], 1.0);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v1_0 = _mm_set_ps(0.0, 1.0, P2[3], 1.0);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ps(v0_0, _mm_movehl_ps(v0_0, v0_0));
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            tempmv333[0] = _mm_cvtss_f32(v0_0);
        }
        //resetMv tempmv346[1];
        float tempmv346[1];
        //resetMv tempmv347[1];
        float tempmv347[1];
        //setMv tempmv347[0] = P2[3];
        tempmv347[0] = P2[3];
        //resetMv tempmv348[1];
        float tempmv348[1];
        //assignMv tempmv348[0] = [6.0];
        tempmv348[0] = 6.0;
        //calculateMvCoeff tempmv346[0] = EXPONENTIATION(tempmv347,tempmv348);
        tempmv346[0] = pow(tempmv347[0], tempmv348[0]);
        //resetMv tempmv349[1];
        float tempmv349[1];
        //resetMv tempmv350[1];
        float tempmv350[1];
        //setMv tempmv350[0] = P2[3];
        tempmv350[0] = P2[3];
        //resetMv tempmv351[1];
        float tempmv351[1];
        //assignMv tempmv351[0] = [5.0];
        tempmv351[0] = 5.0;
        //calculateMvCoeff tempmv349[0] = EXPONENTIATION(tempmv350,tempmv351);
        tempmv349[0] = pow(tempmv350[0], tempmv351[0]);
        //resetMv tempmv352[1];
        float tempmv352[1];
        //setVector ve353 = {3.0,P1[2]};
        //setVector ve354 = {P2[2,2]};
        //setVector ve355 = {P2[2],1.0};
        //dotVectors tempmv352[0] = <ve353,ve354,ve355>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(0.0, 0.0, P1[2], 3.0);
            v1_0 = _mm_set_ps(0.0, 0.0, P2[2], P2[2]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v1_0 = _mm_set_ps(0.0, 0.0, 1.0, P2[2]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            tempmv352[0] = _mm_cvtss_f32(v0_0);
        }
        //resetMv tempmv356[1];
        float tempmv356[1];
        //resetMv tempmv357[1];
        float tempmv357[1];
        //setMv tempmv357[0] = P2[3];
        tempmv357[0] = P2[3];
        //resetMv tempmv358[1];
        float tempmv358[1];
        //assignMv tempmv358[0] = [4.0];
        tempmv358[0] = 4.0;
        //calculateMvCoeff tempmv356[0] = EXPONENTIATION(tempmv357,tempmv358);
        tempmv356[0] = pow(tempmv357[0], tempmv358[0]);
        //resetMv tempmv359[1];
        float tempmv359[1];
        //resetMv tempmv360[1];
        float tempmv360[1];
        //resetMv tempmv361[1];
        float tempmv361[1];
        //setMv tempmv361[0] = P2[2];
        tempmv361[0] = P2[2];
        //resetMv tempmv362[1];
        float tempmv362[1];
        //assignMv tempmv362[0] = [4.0];
        tempmv362[0] = 4.0;
        //calculateMvCoeff tempmv360[0] = EXPONENTIATION(tempmv361,tempmv362);
        tempmv360[0] = pow(tempmv361[0], tempmv362[0]);
        //setVector ve363 = {3.0,2.0};
        //setVector ve364 = {tempmv360[0],P1[2]};
        //setVector ve365 = {1.0,P2[2]};
        //setVector ve366 = {1.0,P2[2]};
        //setVector ve367 = {1.0,P2[2]};
        //dotVectors tempmv359[0] = <ve363,ve364,ve365,ve366,ve367>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(0.0, 0.0, 2.0, 3.0);
            v1_0 = _mm_set_ps(0.0, 0.0, P1[2], tempmv360[0]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v1_0 = _mm_set_ps(0.0, 0.0, P2[2], 1.0);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v1_0 = _mm_set_ps(0.0, 0.0, P2[2], 1.0);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v1_0 = _mm_set_ps(0.0, 0.0, P2[2], 1.0);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            tempmv359[0] = _mm_cvtss_f32(v0_0);
        }
        //resetMv tempmv368[1];
        float tempmv368[1];
        //resetMv tempmv369[1];
        float tempmv369[1];
        //setMv tempmv369[0] = P2[2];
        tempmv369[0] = P2[2];
        //resetMv tempmv370[1];
        float tempmv370[1];
        //assignMv tempmv370[0] = [4.0];
        tempmv370[0] = 4.0;
        //calculateMvCoeff tempmv368[0] = EXPONENTIATION(tempmv369,tempmv370);
        tempmv368[0] = pow(tempmv369[0], tempmv370[0]);
        //resetMv tempmv371[1];
        float tempmv371[1];
        //resetMv tempmv372[1];
        float tempmv372[1];
        //setMv tempmv372[0] = P2[2];
        tempmv372[0] = P2[2];
        //resetMv tempmv373[1];
        float tempmv373[1];
        //assignMv tempmv373[0] = [6.0];
        tempmv373[0] = 6.0;
        //calculateMvCoeff tempmv371[0] = EXPONENTIATION(tempmv372,tempmv373);
        tempmv371[0] = pow(tempmv372[0], tempmv373[0]);
        //resetMv tempmv374[1];
        float tempmv374[1];
        //resetMv tempmv375[1];
        float tempmv375[1];
        //setMv tempmv375[0] = P2[2];
        tempmv375[0] = P2[2];
        //resetMv tempmv376[1];
        float tempmv376[1];
        //assignMv tempmv376[0] = [5.0];
        tempmv376[0] = 5.0;
        //calculateMvCoeff tempmv374[0] = EXPONENTIATION(tempmv375,tempmv376);
        tempmv374[0] = pow(tempmv375[0], tempmv376[0]);
        //setVector ve377 = {tempmv299[0],P1[4],tempmv305[0],tempmv312[0],tempmv317[0],tempmv333[0],tempmv346[0],P1[3],tempmv352[0],2.0,tempmv359[0],P1[3],tempmv371[0],P1[2]};
        //setVector ve378 = {1.0,tempmv302[0],tempmv309[0],P2[4,4,4],1.0,tempmv349[0],tempmv356[0],P1[3],P2[3],tempmv368[0],1.0,tempmv374[0]};
        //setVector ve379 = {1.0,1.0,1.0,P2[4,4],1.0,1.0,1.0,1.0,P2[2,3,3],1.0,1.0};
        //setVector ve380 = {1.0,1.0,1.0,P2[4],1.0,1.0,1.0,1.0,1.0,P2[2],1.0,1.0,1.0,1.0};
        //setVector ve381 = {1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,P2[3],1.0,1.0,1.0,1.0};
        //setVector ve382 = {1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,P2[3],1.0,1.0,1.0,1.0};
        //setVector ve383 = {1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,P2[3],1.0,1.0,1.0,1.0};
        //dotVectors tempmv298[0] = <ve377,ve378,ve379,ve380,ve381,ve382,ve383>;
        {
            __m128 v0_0, v1_0, v0_1, v1_1, v0_2, v1_2, v0_3, v1_3;
            v0_0 = _mm_set_ps(tempmv312[0], tempmv305[0], P1[4], tempmv299[0]);
            v1_0 = _mm_set_ps(P2[4], tempmv309[0], tempmv302[0], 1.0);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v1_0 = _mm_set_ps(P2[4], 1.0, 1.0, 1.0);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v1_0 = _mm_set_ps(P2[4], 1.0, 1.0, 1.0);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v1_0 = _mm_set_ps(1.0, 1.0, 1.0, 1.0);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v1_0 = _mm_set_ps(1.0, 1.0, 1.0, 1.0);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v1_0 = _mm_set_ps(1.0, 1.0, 1.0, 1.0);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_1 = _mm_set_ps(P1[3], tempmv346[0], tempmv333[0], tempmv317[0]);
            v1_1 = _mm_set_ps(tempmv349[0], 1.0, P2[4], P2[4]);
            v0_1 = _mm_mul_ps(v0_1, v1_1);
            v1_1 = _mm_set_ps(1.0, 1.0, 1.0, P2[4]);
            v0_1 = _mm_mul_ps(v0_1, v1_1);
            v1_1 = _mm_set_ps(1.0, 1.0, 1.0, 1.0);
            v0_1 = _mm_mul_ps(v0_1, v1_1);
            v1_1 = _mm_set_ps(1.0, 1.0, 1.0, 1.0);
            v0_1 = _mm_mul_ps(v0_1, v1_1);
            v1_1 = _mm_set_ps(1.0, 1.0, 1.0, 1.0);
            v0_1 = _mm_mul_ps(v0_1, v1_1);
            v1_1 = _mm_set_ps(1.0, 1.0, 1.0, 1.0);
            v0_1 = _mm_mul_ps(v0_1, v1_1);
            v0_2 = _mm_set_ps(P1[3], tempmv359[0], 2.0, tempmv352[0]);
            v1_2 = _mm_set_ps(tempmv368[0], P2[3], P1[3], tempmv356[0]);
            v0_2 = _mm_mul_ps(v0_2, v1_2);
            v1_2 = _mm_set_ps(P2[3], P2[3], P2[2], 1.0);
            v0_2 = _mm_mul_ps(v0_2, v1_2);
            v1_2 = _mm_set_ps(1.0, 1.0, P2[2], 1.0);
            v0_2 = _mm_mul_ps(v0_2, v1_2);
            v1_2 = _mm_set_ps(1.0, 1.0, P2[3], 1.0);
            v0_2 = _mm_mul_ps(v0_2, v1_2);
            v1_2 = _mm_set_ps(1.0, 1.0, P2[3], 1.0);
            v0_2 = _mm_mul_ps(v0_2, v1_2);
            v1_2 = _mm_set_ps(1.0, 1.0, P2[3], 1.0);
            v0_2 = _mm_mul_ps(v0_2, v1_2);
            v0_3 = _mm_set_ps(0.0, 0.0, P1[2], tempmv371[0]);
            v1_3 = _mm_set_ps(0.0, 0.0, tempmv374[0], 1.0);
            v0_3 = _mm_mul_ps(v0_3, v1_3);
            v1_3 = _mm_set_ps(0.0, 0.0, 1.0, 1.0);
            v0_3 = _mm_mul_ps(v0_3, v1_3);
            v1_3 = _mm_set_ps(0.0, 0.0, 1.0, 1.0);
            v0_3 = _mm_mul_ps(v0_3, v1_3);
            v1_3 = _mm_set_ps(0.0, 0.0, 1.0, 1.0);
            v0_3 = _mm_mul_ps(v0_3, v1_3);
            v1_3 = _mm_set_ps(0.0, 0.0, 1.0, 1.0);
            v0_3 = _mm_mul_ps(v0_3, v1_3);
            v1_3 = _mm_set_ps(0.0, 0.0, 1.0, 1.0);
            v0_3 = _mm_mul_ps(v0_3, v1_3);
            v0_0 = _mm_add_ps(v0_0, v0_3);
            v0_0 = _mm_add_ps(v0_0, v0_2);
            v0_0 = _mm_add_ps(v0_0, v0_1);
            v0_0 = _mm_add_ps(v0_0, _mm_movehl_ps(v0_0, v0_0));
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            tempmv298[0] = _mm_cvtss_f32(v0_0);
        }
        //resetMv tempmv384[1];
        float tempmv384[1];
        //resetMv tempmv385[1];
        float tempmv385[1];
        //resetMv tempmv386[1];
        float tempmv386[1];
        //setMv tempmv386[0] = P2[4];
        tempmv386[0] = P2[4];
        //resetMv tempmv387[1];
        float tempmv387[1];
        //assignMv tempmv387[0] = [6.0];
        tempmv387[0] = 6.0;
        //calculateMvCoeff tempmv385[0] = EXPONENTIATION(tempmv386,tempmv387);
        tempmv385[0] = pow(tempmv386[0], tempmv387[0]);
        //resetMv tempmv388[1];
        float tempmv388[1];
        //setVector ve389 = {3.0,3.0};
        //setVector ve390 = {P2[3,2]};
        //setVector ve391 = {P2[3,2]};
        //dotVectors tempmv388[0] = <ve389,ve390,ve391>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(0.0, 0.0, 3.0, 3.0);
            v1_0 = _mm_set_ps(0.0, 0.0, P2[2], P2[3]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v1_0 = _mm_set_ps(0.0, 0.0, P2[2], P2[3]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            tempmv388[0] = _mm_cvtss_f32(v0_0);
        }
        //resetMv tempmv392[1];
        float tempmv392[1];
        //resetMv tempmv393[1];
        float tempmv393[1];
        //setMv tempmv393[0] = P2[4];
        tempmv393[0] = P2[4];
        //resetMv tempmv394[1];
        float tempmv394[1];
        //assignMv tempmv394[0] = [4.0];
        tempmv394[0] = 4.0;
        //calculateMvCoeff tempmv392[0] = EXPONENTIATION(tempmv393,tempmv394);
        tempmv392[0] = pow(tempmv393[0], tempmv394[0]);
        //resetMv tempmv395[1];
        float tempmv395[1];
        //resetMv tempmv396[1];
        float tempmv396[1];
        //resetMv tempmv397[1];
        float tempmv397[1];
        //setMv tempmv397[0] = P2[3];
        tempmv397[0] = P2[3];
        //resetMv tempmv398[1];
        float tempmv398[1];
        //assignMv tempmv398[0] = [4.0];
        tempmv398[0] = 4.0;
        //calculateMvCoeff tempmv396[0] = EXPONENTIATION(tempmv397,tempmv398);
        tempmv396[0] = pow(tempmv397[0], tempmv398[0]);
        //resetMv tempmv399[1];
        float tempmv399[1];
        //resetMv tempmv400[1];
        float tempmv400[1];
        //setMv tempmv400[0] = P2[2];
        tempmv400[0] = P2[2];
        //resetMv tempmv401[1];
        float tempmv401[1];
        //assignMv tempmv401[0] = [4.0];
        tempmv401[0] = 4.0;
        //calculateMvCoeff tempmv399[0] = EXPONENTIATION(tempmv400,tempmv401);
        tempmv399[0] = pow(tempmv400[0], tempmv401[0]);
        //setVector ve402 = {3.0,6.0,3.0};
        //setVector ve403 = {tempmv396[0],P2[2],tempmv399[0]};
        //setVector ve404 = {1.0,P2[2],1.0};
        //setVector ve405 = {1.0,P2[3],1.0};
        //setVector ve406 = {1.0,P2[3],1.0};
        //dotVectors tempmv395[0] = <ve402,ve403,ve404,ve405,ve406>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(0.0, 3.0, 6.0, 3.0);
            v1_0 = _mm_set_ps(0.0, tempmv399[0], P2[2], tempmv396[0]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v1_0 = _mm_set_ps(0.0, 1.0, P2[2], 1.0);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v1_0 = _mm_set_ps(0.0, 1.0, P2[3], 1.0);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v1_0 = _mm_set_ps(0.0, 1.0, P2[3], 1.0);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ps(v0_0, _mm_movehl_ps(v0_0, v0_0));
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            tempmv395[0] = _mm_cvtss_f32(v0_0);
        }
        //resetMv tempmv407[1];
        float tempmv407[1];
        //resetMv tempmv408[1];
        float tempmv408[1];
        //setMv tempmv408[0] = P2[3];
        tempmv408[0] = P2[3];
        //resetMv tempmv409[1];
        float tempmv409[1];
        //assignMv tempmv409[0] = [6.0];
        tempmv409[0] = 6.0;
        //calculateMvCoeff tempmv407[0] = EXPONENTIATION(tempmv408,tempmv409);
        tempmv407[0] = pow(tempmv408[0], tempmv409[0]);
        //resetMv tempmv410[1];
        float tempmv410[1];
        //resetMv tempmv411[1];
        float tempmv411[1];
        //setMv tempmv411[0] = P2[3];
        tempmv411[0] = P2[3];
        //resetMv tempmv412[1];
        float tempmv412[1];
        //assignMv tempmv412[0] = [4.0];
        tempmv412[0] = 4.0;
        //calculateMvCoeff tempmv410[0] = EXPONENTIATION(tempmv411,tempmv412);
        tempmv410[0] = pow(tempmv411[0], tempmv412[0]);
        //resetMv tempmv413[1];
        float tempmv413[1];
        //resetMv tempmv414[1];
        float tempmv414[1];
        //setMv tempmv414[0] = P2[2];
        tempmv414[0] = P2[2];
        //resetMv tempmv415[1];
        float tempmv415[1];
        //assignMv tempmv415[0] = [4.0];
        tempmv415[0] = 4.0;
        //calculateMvCoeff tempmv413[0] = EXPONENTIATION(tempmv414,tempmv415);
        tempmv413[0] = pow(tempmv414[0], tempmv415[0]);
        //resetMv tempmv416[1];
        float tempmv416[1];
        //resetMv tempmv417[1];
        float tempmv417[1];
        //setMv tempmv417[0] = P2[2];
        tempmv417[0] = P2[2];
        //resetMv tempmv418[1];
        float tempmv418[1];
        //assignMv tempmv418[0] = [6.0];
        tempmv418[0] = 6.0;
        //calculateMvCoeff tempmv416[0] = EXPONENTIATION(tempmv417,tempmv418);
        tempmv416[0] = pow(tempmv417[0], tempmv418[0]);
        //setVector ve419 = {tempmv385[0],tempmv388[0],tempmv395[0],tempmv407[0],3.0,3.0,tempmv416[0]};
        //setVector ve420 = {1.0,tempmv392[0],P2[4],1.0,P2[2],tempmv413[0],1.0};
        //setVector ve421 = {1.0,1.0,P2[4],1.0,P2[2,3],1.0};
        //setVector ve422 = {1.0,1.0,1.0,1.0,tempmv410[0],P2[3],1.0};
        //dotVectors tempmv384[0] = <ve419,ve420,ve421,ve422>;
        {
            __m128 v0_0, v1_0, v0_1, v1_1;
            v0_0 = _mm_set_ps(tempmv407[0], tempmv395[0], tempmv388[0], tempmv385[0]);
            v1_0 = _mm_set_ps(1.0, P2[4], tempmv392[0], 1.0);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v1_0 = _mm_set_ps(1.0, P2[4], 1.0, 1.0);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v1_0 = _mm_set_ps(1.0, 1.0, 1.0, 1.0);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_1 = _mm_set_ps(0.0, tempmv416[0], 3.0, 3.0);
            v1_1 = _mm_set_ps(0.0, 1.0, tempmv413[0], P2[2]);
            v0_1 = _mm_mul_ps(v0_1, v1_1);
            v1_1 = _mm_set_ps(0.0, 1.0, P2[3], P2[2]);
            v0_1 = _mm_mul_ps(v0_1, v1_1);
            v1_1 = _mm_set_ps(0.0, 1.0, P2[3], tempmv410[0]);
            v0_1 = _mm_mul_ps(v0_1, v1_1);
            v0_0 = _mm_add_ps(v0_0, v0_1);
            v0_0 = _mm_add_ps(v0_0, _mm_movehl_ps(v0_0, v0_0));
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            tempmv384[0] = _mm_cvtss_f32(v0_0);
        }
        //resetMv tempmv423[1];
        float tempmv423[1];
        //setMv tempmv423[0] = tempmv298[0];
        tempmv423[0] = tempmv298[0];
        //resetMv tempmv424[1];
        float tempmv424[1];
        //setMv tempmv424[0] = tempmv384[0];
        tempmv424[0] = tempmv384[0];
        //calculateMvCoeff VC_unnormalized[0] = DIVISION(tempmv423,tempmv424);
        VC_unnormalized[0] = tempmv423[0] / tempmv424[0];
        //resetMv tempmv425[1];
        float tempmv425[1];
        //setVector ve426 = {P1[1,-2]};
        //setVector ve427 = {P2[2,1]};
        //dotVectors tempmv425[0] = <ve426,ve427>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(0.0, 0.0, -P1[2], P1[1]);
            v1_0 = _mm_set_ps(0.0, 0.0, P2[1], P2[2]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            tempmv425[0] = _mm_cvtss_f32(v0_0);
        }
        //resetMv tempmv428[1];
        float tempmv428[1];
        //setVector ve429 = {P2[4,3,2]};
        //setVector ve430 = {P2[4,3,2]};
        //dotVectors tempmv428[0] = <ve429,ve430>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(0.0, P2[2], P2[3], P2[4]);
            v1_0 = _mm_set_ps(0.0, P2[2], P2[3], P2[4]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ps(v0_0, _mm_movehl_ps(v0_0, v0_0));
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            tempmv428[0] = _mm_cvtss_f32(v0_0);
        }
        //resetMv tempmv431[1];
        float tempmv431[1];
        //setMv tempmv431[0] = tempmv425[0];
        tempmv431[0] = tempmv425[0];
        //resetMv tempmv432[1];
        float tempmv432[1];
        //setMv tempmv432[0] = tempmv428[0];
        tempmv432[0] = tempmv428[0];
        //calculateMvCoeff VC_unnormalized[5] = DIVISION(tempmv431,tempmv432);
        VC_unnormalized[5] = tempmv431[0] / tempmv432[0];
        //resetMv tempmv433[1];
        float tempmv433[1];
        //setVector ve434 = {P1[1,-3]};
        //setVector ve435 = {P2[3,1]};
        //dotVectors tempmv433[0] = <ve434,ve435>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(0.0, 0.0, -P1[3], P1[1]);
            v1_0 = _mm_set_ps(0.0, 0.0, P2[1], P2[3]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            tempmv433[0] = _mm_cvtss_f32(v0_0);
        }
        //resetMv tempmv436[1];
        float tempmv436[1];
        //setVector ve437 = {P2[4,3,2]};
        //setVector ve438 = {P2[4,3,2]};
        //dotVectors tempmv436[0] = <ve437,ve438>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(0.0, P2[2], P2[3], P2[4]);
            v1_0 = _mm_set_ps(0.0, P2[2], P2[3], P2[4]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ps(v0_0, _mm_movehl_ps(v0_0, v0_0));
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            tempmv436[0] = _mm_cvtss_f32(v0_0);
        }
        //resetMv tempmv439[1];
        float tempmv439[1];
        //setMv tempmv439[0] = tempmv433[0];
        tempmv439[0] = tempmv433[0];
        //resetMv tempmv440[1];
        float tempmv440[1];
        //setMv tempmv440[0] = tempmv436[0];
        tempmv440[0] = tempmv436[0];
        //calculateMvCoeff VC_unnormalized[6] = DIVISION(tempmv439,tempmv440);
        VC_unnormalized[6] = tempmv439[0] / tempmv440[0];
        //resetMv tempmv441[1];
        float tempmv441[1];
        //setVector ve442 = {P1[1,-4]};
        //setVector ve443 = {P2[4,1]};
        //dotVectors tempmv441[0] = <ve442,ve443>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(0.0, 0.0, -P1[4], P1[1]);
            v1_0 = _mm_set_ps(0.0, 0.0, P2[1], P2[4]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            tempmv441[0] = _mm_cvtss_f32(v0_0);
        }
        //resetMv tempmv444[1];
        float tempmv444[1];
        //setVector ve445 = {P2[4,3,2]};
        //setVector ve446 = {P2[4,3,2]};
        //dotVectors tempmv444[0] = <ve445,ve446>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(0.0, P2[2], P2[3], P2[4]);
            v1_0 = _mm_set_ps(0.0, P2[2], P2[3], P2[4]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ps(v0_0, _mm_movehl_ps(v0_0, v0_0));
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            tempmv444[0] = _mm_cvtss_f32(v0_0);
        }
        //resetMv tempmv447[1];
        float tempmv447[1];
        //setMv tempmv447[0] = tempmv441[0];
        tempmv447[0] = tempmv441[0];
        //resetMv tempmv448[1];
        float tempmv448[1];
        //setMv tempmv448[0] = tempmv444[0];
        tempmv448[0] = tempmv444[0];
        //calculateMvCoeff VC_unnormalized[7] = DIVISION(tempmv447,tempmv448);
        VC_unnormalized[7] = tempmv447[0] / tempmv448[0];
        //resetMv tempmv449[1];
        float tempmv449[1];
        //setVector ve450 = {P1[2,-3]};
        //setVector ve451 = {P2[3,2]};
        //dotVectors tempmv449[0] = <ve450,ve451>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(0.0, 0.0, -P1[3], P1[2]);
            v1_0 = _mm_set_ps(0.0, 0.0, P2[2], P2[3]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            tempmv449[0] = _mm_cvtss_f32(v0_0);
        }
        //resetMv tempmv452[1];
        float tempmv452[1];
        //setVector ve453 = {P2[4,3,2]};
        //setVector ve454 = {P2[4,3,2]};
        //dotVectors tempmv452[0] = <ve453,ve454>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(0.0, P2[2], P2[3], P2[4]);
            v1_0 = _mm_set_ps(0.0, P2[2], P2[3], P2[4]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ps(v0_0, _mm_movehl_ps(v0_0, v0_0));
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            tempmv452[0] = _mm_cvtss_f32(v0_0);
        }
        //resetMv tempmv455[1];
        float tempmv455[1];
        //setMv tempmv455[0] = tempmv449[0];
        tempmv455[0] = tempmv449[0];
        //resetMv tempmv456[1];
        float tempmv456[1];
        //setMv tempmv456[0] = tempmv452[0];
        tempmv456[0] = tempmv452[0];
        //calculateMvCoeff VC_unnormalized[8] = DIVISION(tempmv455,tempmv456);
        VC_unnormalized[8] = tempmv455[0] / tempmv456[0];
        //resetMv tempmv457[1];
        float tempmv457[1];
        //setVector ve458 = {P1[2,-4]};
        //setVector ve459 = {P2[4,2]};
        //dotVectors tempmv457[0] = <ve458,ve459>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(0.0, 0.0, -P1[4], P1[2]);
            v1_0 = _mm_set_ps(0.0, 0.0, P2[2], P2[4]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            tempmv457[0] = _mm_cvtss_f32(v0_0);
        }
        //resetMv tempmv460[1];
        float tempmv460[1];
        //setVector ve461 = {P2[4,3,2]};
        //setVector ve462 = {P2[4,3,2]};
        //dotVectors tempmv460[0] = <ve461,ve462>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(0.0, P2[2], P2[3], P2[4]);
            v1_0 = _mm_set_ps(0.0, P2[2], P2[3], P2[4]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ps(v0_0, _mm_movehl_ps(v0_0, v0_0));
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            tempmv460[0] = _mm_cvtss_f32(v0_0);
        }
        //resetMv tempmv463[1];
        float tempmv463[1];
        //setMv tempmv463[0] = tempmv457[0];
        tempmv463[0] = tempmv457[0];
        //resetMv tempmv464[1];
        float tempmv464[1];
        //setMv tempmv464[0] = tempmv460[0];
        tempmv464[0] = tempmv460[0];
        //calculateMvCoeff VC_unnormalized[9] = DIVISION(tempmv463,tempmv464);
        VC_unnormalized[9] = tempmv463[0] / tempmv464[0];
        //resetMv tempmv465[1];
        float tempmv465[1];
        //setVector ve466 = {P1[3,-4]};
        //setVector ve467 = {P2[4,3]};
        //dotVectors tempmv465[0] = <ve466,ve467>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(0.0, 0.0, -P1[4], P1[3]);
            v1_0 = _mm_set_ps(0.0, 0.0, P2[3], P2[4]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            tempmv465[0] = _mm_cvtss_f32(v0_0);
        }
        //resetMv tempmv468[1];
        float tempmv468[1];
        //setVector ve469 = {P2[4,3,2]};
        //setVector ve470 = {P2[4,3,2]};
        //dotVectors tempmv468[0] = <ve469,ve470>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(0.0, P2[2], P2[3], P2[4]);
            v1_0 = _mm_set_ps(0.0, P2[2], P2[3], P2[4]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ps(v0_0, _mm_movehl_ps(v0_0, v0_0));
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            tempmv468[0] = _mm_cvtss_f32(v0_0);
        }
        //resetMv tempmv471[1];
        float tempmv471[1];
        //setMv tempmv471[0] = tempmv465[0];
        tempmv471[0] = tempmv465[0];
        //resetMv tempmv472[1];
        float tempmv472[1];
        //setMv tempmv472[0] = tempmv468[0];
        tempmv472[0] = tempmv468[0];
        //calculateMvCoeff VC_unnormalized[10] = DIVISION(tempmv471,tempmv472);
        VC_unnormalized[10] = tempmv471[0] / tempmv472[0];
        //resetMv VC_norm[16];
        //resetMv tempmv473[1];
        float tempmv473[1];
        //setVector ve474 = {VC_unnormalized[9,8,10,0]};
        //setVector ve475 = {VC_unnormalized[9,8,10,0]};
        //dotVectors tempmv473[0] = <ve474,ve475>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(VC_unnormalized[0], VC_unnormalized[10], VC_unnormalized[8], VC_unnormalized[9]);
            v1_0 = _mm_set_ps(VC_unnormalized[0], VC_unnormalized[10], VC_unnormalized[8], VC_unnormalized[9]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ps(v0_0, _mm_movehl_ps(v0_0, v0_0));
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            tempmv473[0] = _mm_cvtss_f32(v0_0);
        }
        //resetMv tempmv476[1];
        float tempmv476[1];
        //setMv tempmv476[0] = tempmv473[0];
        tempmv476[0] = tempmv473[0];
        //calculateMvCoeff VC_norm[0] = SQRT(tempmv476);
        VC_norm[0] = sqrt(tempmv476[0]);
        //resetMv VC[16];
        //resetMv tempmv477[1];
        float tempmv477[1];
        //setMv tempmv477[0] = VC_unnormalized[0];
        tempmv477[0] = VC_unnormalized[0];
        //resetMv tempmv478[1];
        float tempmv478[1];
        //setMv tempmv478[0] = VC_norm[0];
        tempmv478[0] = VC_norm[0];
        //calculateMvCoeff VC[0] = DIVISION(tempmv477,tempmv478);
        VC[0] = tempmv477[0] / tempmv478[0];
        //resetMv tempmv479[1];
        float tempmv479[1];
        //setMv tempmv479[0] = VC_unnormalized[5];
        tempmv479[0] = VC_unnormalized[5];
        //resetMv tempmv480[1];
        float tempmv480[1];
        //setMv tempmv480[0] = VC_norm[0];
        tempmv480[0] = VC_norm[0];
        //calculateMvCoeff VC[5] = DIVISION(tempmv479,tempmv480);
        VC[5] = tempmv479[0] / tempmv480[0];
        //resetMv tempmv481[1];
        float tempmv481[1];
        //setMv tempmv481[0] = VC_unnormalized[6];
        tempmv481[0] = VC_unnormalized[6];
        //resetMv tempmv482[1];
        float tempmv482[1];
        //setMv tempmv482[0] = VC_norm[0];
        tempmv482[0] = VC_norm[0];
        //calculateMvCoeff VC[6] = DIVISION(tempmv481,tempmv482);
        VC[6] = tempmv481[0] / tempmv482[0];
        //resetMv tempmv483[1];
        float tempmv483[1];
        //setMv tempmv483[0] = VC_unnormalized[7];
        tempmv483[0] = VC_unnormalized[7];
        //resetMv tempmv484[1];
        float tempmv484[1];
        //setMv tempmv484[0] = VC_norm[0];
        tempmv484[0] = VC_norm[0];
        //calculateMvCoeff VC[7] = DIVISION(tempmv483,tempmv484);
        VC[7] = tempmv483[0] / tempmv484[0];
        //resetMv tempmv485[1];
        float tempmv485[1];
        //setMv tempmv485[0] = VC_unnormalized[8];
        tempmv485[0] = VC_unnormalized[8];
        //resetMv tempmv486[1];
        float tempmv486[1];
        //setMv tempmv486[0] = VC_norm[0];
        tempmv486[0] = VC_norm[0];
        //calculateMvCoeff VC[8] = DIVISION(tempmv485,tempmv486);
        VC[8] = tempmv485[0] / tempmv486[0];
        //resetMv tempmv487[1];
        float tempmv487[1];
        //setMv tempmv487[0] = VC_unnormalized[9];
        tempmv487[0] = VC_unnormalized[9];
        //resetMv tempmv488[1];
        float tempmv488[1];
        //setMv tempmv488[0] = VC_norm[0];
        tempmv488[0] = VC_norm[0];
        //calculateMvCoeff VC[9] = DIVISION(tempmv487,tempmv488);
        VC[9] = tempmv487[0] / tempmv488[0];
        //resetMv tempmv489[1];
        float tempmv489[1];
        //setMv tempmv489[0] = VC_unnormalized[10];
        tempmv489[0] = VC_unnormalized[10];
        //resetMv tempmv490[1];
        float tempmv490[1];
        //setMv tempmv490[0] = VC_norm[0];
        tempmv490[0] = VC_norm[0];
        //calculateMvCoeff VC[10] = DIVISION(tempmv489,tempmv490);
        VC[10] = tempmv489[0] / tempmv490[0];
        //resetMv combined_motor[16];
        //setVector ve491 = {VB[-9,-8,-10,0]};
        //setVector ve492 = {VC[9,8,10,0]};
        //dotVectors combined_motor[0] = <ve491,ve492>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(VB[0], -VB[10], -VB[8], -VB[9]);
            v1_0 = _mm_set_ps(VC[0], VC[10], VC[8], VC[9]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ps(v0_0, _mm_movehl_ps(v0_0, v0_0));
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            combined_motor[0] = _mm_cvtss_f32(v0_0);
        }
        //resetMv tempmv493[1];
        float tempmv493[1];
        //setVector ve494 = {VA[-5],VB[7],VA[-6,7]};
        //setVector ve495 = {VB[9],1.0,VB[10,0]};
        //dotVectors tempmv493[0] = <ve494,ve495>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(VA[7], -VA[6], VB[7], -VA[5]);
            v1_0 = _mm_set_ps(VB[0], VB[10], 1.0, VB[9]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ps(v0_0, _mm_movehl_ps(v0_0, v0_0));
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            tempmv493[0] = _mm_cvtss_f32(v0_0);
        }
        //resetMv tempmv496[1];
        float tempmv496[1];
        //setVector ve497 = {VA[-5],VB[6],VA[7,6]};
        //setVector ve498 = {VB[8],1.0,VB[10,0]};
        //dotVectors tempmv496[0] = <ve497,ve498>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(VA[6], VA[7], VB[6], -VA[5]);
            v1_0 = _mm_set_ps(VB[0], VB[10], 1.0, VB[8]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ps(v0_0, _mm_movehl_ps(v0_0, v0_0));
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            tempmv496[0] = _mm_cvtss_f32(v0_0);
        }
        //resetMv tempmv499[1];
        float tempmv499[1];
        //setVector ve500 = {VA[6,-7],VB[-15],VA[-5]};
        //setVector ve501 = {VB[9,8],1.0,VB[10]};
        //dotVectors tempmv499[0] = <ve500,ve501>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(-VA[5], -VB[15], -VA[7], VA[6]);
            v1_0 = _mm_set_ps(VB[10], 1.0, VB[8], VB[9]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ps(v0_0, _mm_movehl_ps(v0_0, v0_0));
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            tempmv499[0] = _mm_cvtss_f32(v0_0);
        }
        //resetMv tempmv502[1];
        float tempmv502[1];
        //setVector ve503 = {VA[7,6],VB[5],VA[5]};
        //setVector ve504 = {VB[9,8],1.0,VB[0]};
        //dotVectors tempmv502[0] = <ve503,ve504>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(VA[5], VB[5], VA[6], VA[7]);
            v1_0 = _mm_set_ps(VB[0], 1.0, VB[8], VB[9]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ps(v0_0, _mm_movehl_ps(v0_0, v0_0));
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            tempmv502[0] = _mm_cvtss_f32(v0_0);
        }
        //setVector ve505 = {tempmv493[0],tempmv496[0],VB[-9,-8,0],tempmv499[0],tempmv502[0]};
        //setVector ve506 = {VC[9,8,7,6,5,10,0]};
        //dotVectors combined_motor[5] = <ve505,ve506>;
        {
            __m128 v0_0, v1_0, v0_1, v1_1;
            v0_0 = _mm_set_ps(-VB[8], -VB[9], tempmv496[0], tempmv493[0]);
            v1_0 = _mm_set_ps(VC[6], VC[7], VC[8], VC[9]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_1 = _mm_set_ps(0.0, tempmv502[0], tempmv499[0], VB[0]);
            v1_1 = _mm_set_ps(0.0, VC[0], VC[10], VC[5]);
            v0_1 = _mm_mul_ps(v0_1, v1_1);
            v0_0 = _mm_add_ps(v0_0, v0_1);
            v0_0 = _mm_add_ps(v0_0, _mm_movehl_ps(v0_0, v0_0));
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            combined_motor[5] = _mm_cvtss_f32(v0_0);
        }
        //resetMv tempmv507[1];
        float tempmv507[1];
        //setVector ve508 = {VA[-6,7],VB[15],VA[5]};
        //setVector ve509 = {VB[9,8],1.0,VB[10]};
        //dotVectors tempmv507[0] = <ve508,ve509>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(VA[5], VB[15], VA[7], -VA[6]);
            v1_0 = _mm_set_ps(VB[10], 1.0, VB[8], VB[9]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ps(v0_0, _mm_movehl_ps(v0_0, v0_0));
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            tempmv507[0] = _mm_cvtss_f32(v0_0);
        }
        //resetMv tempmv510[1];
        float tempmv510[1];
        //setVector ve511 = {VA[-7,-6],VB[-5],VA[-5]};
        //setVector ve512 = {VB[9,8],1.0,VB[0]};
        //dotVectors tempmv510[0] = <ve511,ve512>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(-VA[5], -VB[5], -VA[6], -VA[7]);
            v1_0 = _mm_set_ps(VB[0], 1.0, VB[8], VB[9]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ps(v0_0, _mm_movehl_ps(v0_0, v0_0));
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            tempmv510[0] = _mm_cvtss_f32(v0_0);
        }
        //resetMv tempmv513[1];
        float tempmv513[1];
        //setVector ve514 = {VA[-5],VB[7],VA[-6,7]};
        //setVector ve515 = {VB[9],1.0,VB[10,0]};
        //dotVectors tempmv513[0] = <ve514,ve515>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(VA[7], -VA[6], VB[7], -VA[5]);
            v1_0 = _mm_set_ps(VB[0], VB[10], 1.0, VB[9]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ps(v0_0, _mm_movehl_ps(v0_0, v0_0));
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            tempmv513[0] = _mm_cvtss_f32(v0_0);
        }
        //resetMv tempmv516[1];
        float tempmv516[1];
        //setVector ve517 = {VA[-5],VB[6],VA[7,6]};
        //setVector ve518 = {VB[8],1.0,VB[10,0]};
        //dotVectors tempmv516[0] = <ve517,ve518>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(VA[6], VA[7], VB[6], -VA[5]);
            v1_0 = _mm_set_ps(VB[0], VB[10], 1.0, VB[8]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ps(v0_0, _mm_movehl_ps(v0_0, v0_0));
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            tempmv516[0] = _mm_cvtss_f32(v0_0);
        }
        //setVector ve519 = {tempmv507[0],tempmv510[0],VB[-10,0,8],tempmv513[0],tempmv516[0]};
        //setVector ve520 = {VC[9,8,7,6,5,10,0]};
        //dotVectors combined_motor[6] = <ve519,ve520>;
        {
            __m128 v0_0, v1_0, v0_1, v1_1;
            v0_0 = _mm_set_ps(VB[0], -VB[10], tempmv510[0], tempmv507[0]);
            v1_0 = _mm_set_ps(VC[6], VC[7], VC[8], VC[9]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_1 = _mm_set_ps(0.0, tempmv516[0], tempmv513[0], VB[8]);
            v1_1 = _mm_set_ps(0.0, VC[0], VC[10], VC[5]);
            v0_1 = _mm_mul_ps(v0_1, v1_1);
            v0_0 = _mm_add_ps(v0_0, v0_1);
            v0_0 = _mm_add_ps(v0_0, _mm_movehl_ps(v0_0, v0_0));
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            combined_motor[6] = _mm_cvtss_f32(v0_0);
        }
        //resetMv tempmv521[1];
        float tempmv521[1];
        //setVector ve522 = {VA[-7,-6],VB[-5],VA[-5]};
        //setVector ve523 = {VB[9,8],1.0,VB[0]};
        //dotVectors tempmv521[0] = <ve522,ve523>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(-VA[5], -VB[5], -VA[6], -VA[7]);
            v1_0 = _mm_set_ps(VB[0], 1.0, VB[8], VB[9]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ps(v0_0, _mm_movehl_ps(v0_0, v0_0));
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            tempmv521[0] = _mm_cvtss_f32(v0_0);
        }
        //resetMv tempmv524[1];
        float tempmv524[1];
        //setVector ve525 = {VA[6,-7],VB[-15],VA[-5]};
        //setVector ve526 = {VB[9,8],1.0,VB[10]};
        //dotVectors tempmv524[0] = <ve525,ve526>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(-VA[5], -VB[15], -VA[7], VA[6]);
            v1_0 = _mm_set_ps(VB[10], 1.0, VB[8], VB[9]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ps(v0_0, _mm_movehl_ps(v0_0, v0_0));
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            tempmv524[0] = _mm_cvtss_f32(v0_0);
        }
        //resetMv tempmv527[1];
        float tempmv527[1];
        //setVector ve528 = {VA[5],VB[-6],VA[-7,-6]};
        //setVector ve529 = {VB[8],1.0,VB[10,0]};
        //dotVectors tempmv527[0] = <ve528,ve529>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(-VA[6], -VA[7], -VB[6], VA[5]);
            v1_0 = _mm_set_ps(VB[0], VB[10], 1.0, VB[8]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ps(v0_0, _mm_movehl_ps(v0_0, v0_0));
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            tempmv527[0] = _mm_cvtss_f32(v0_0);
        }
        //resetMv tempmv530[1];
        float tempmv530[1];
        //setVector ve531 = {VA[-5],VB[7],VA[-6,7]};
        //setVector ve532 = {VB[9],1.0,VB[10,0]};
        //dotVectors tempmv530[0] = <ve531,ve532>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(VA[7], -VA[6], VB[7], -VA[5]);
            v1_0 = _mm_set_ps(VB[0], VB[10], 1.0, VB[9]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ps(v0_0, _mm_movehl_ps(v0_0, v0_0));
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            tempmv530[0] = _mm_cvtss_f32(v0_0);
        }
        //setVector ve533 = {tempmv521[0],tempmv524[0],VB[0,10,9],tempmv527[0],tempmv530[0]};
        //setVector ve534 = {VC[9,8,7,6,5,10,0]};
        //dotVectors combined_motor[7] = <ve533,ve534>;
        {
            __m128 v0_0, v1_0, v0_1, v1_1;
            v0_0 = _mm_set_ps(VB[10], VB[0], tempmv524[0], tempmv521[0]);
            v1_0 = _mm_set_ps(VC[6], VC[7], VC[8], VC[9]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_1 = _mm_set_ps(0.0, tempmv530[0], tempmv527[0], VB[9]);
            v1_1 = _mm_set_ps(0.0, VC[0], VC[10], VC[5]);
            v0_1 = _mm_mul_ps(v0_1, v1_1);
            v0_0 = _mm_add_ps(v0_0, v0_1);
            v0_0 = _mm_add_ps(v0_0, _mm_movehl_ps(v0_0, v0_0));
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            combined_motor[7] = _mm_cvtss_f32(v0_0);
        }
        //setVector ve535 = {VB[-10,0,9,8]};
        //setVector ve536 = {VC[9,8,10,0]};
        //dotVectors combined_motor[8] = <ve535,ve536>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(VB[8], VB[9], VB[0], -VB[10]);
            v1_0 = _mm_set_ps(VC[0], VC[10], VC[8], VC[9]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ps(v0_0, _mm_movehl_ps(v0_0, v0_0));
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            combined_motor[8] = _mm_cvtss_f32(v0_0);
        }
        //setVector ve537 = {VB[0,10,-8,9]};
        //setVector ve538 = {VC[9,8,10,0]};
        //dotVectors combined_motor[9] = <ve537,ve538>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(VB[9], -VB[8], VB[10], VB[0]);
            v1_0 = _mm_set_ps(VC[0], VC[10], VC[8], VC[9]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ps(v0_0, _mm_movehl_ps(v0_0, v0_0));
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            combined_motor[9] = _mm_cvtss_f32(v0_0);
        }
        //setVector ve539 = {VB[8,-9,0,10]};
        //setVector ve540 = {VC[9,8,10,0]};
        //dotVectors combined_motor[10] = <ve539,ve540>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(VB[10], VB[0], -VB[9], VB[8]);
            v1_0 = _mm_set_ps(VC[0], VC[10], VC[8], VC[9]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ps(v0_0, _mm_movehl_ps(v0_0, v0_0));
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            combined_motor[10] = _mm_cvtss_f32(v0_0);
        }
        //resetMv tempmv541[1];
        float tempmv541[1];
        //setVector ve542 = {VA[5],VB[-6],VA[-7,-6]};
        //setVector ve543 = {VB[8],1.0,VB[10,0]};
        //dotVectors tempmv541[0] = <ve542,ve543>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(-VA[6], -VA[7], -VB[6], VA[5]);
            v1_0 = _mm_set_ps(VB[0], VB[10], 1.0, VB[8]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ps(v0_0, _mm_movehl_ps(v0_0, v0_0));
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            tempmv541[0] = _mm_cvtss_f32(v0_0);
        }
        //resetMv tempmv544[1];
        float tempmv544[1];
        //setVector ve545 = {VA[-5],VB[7],VA[-6,7]};
        //setVector ve546 = {VB[9],1.0,VB[10,0]};
        //dotVectors tempmv544[0] = <ve545,ve546>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(VA[7], -VA[6], VB[7], -VA[5]);
            v1_0 = _mm_set_ps(VB[0], VB[10], 1.0, VB[9]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ps(v0_0, _mm_movehl_ps(v0_0, v0_0));
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            tempmv544[0] = _mm_cvtss_f32(v0_0);
        }
        //resetMv tempmv547[1];
        float tempmv547[1];
        //setVector ve548 = {VA[7,6],VB[5],VA[5]};
        //setVector ve549 = {VB[9,8],1.0,VB[0]};
        //dotVectors tempmv547[0] = <ve548,ve549>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(VA[5], VB[5], VA[6], VA[7]);
            v1_0 = _mm_set_ps(VB[0], 1.0, VB[8], VB[9]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ps(v0_0, _mm_movehl_ps(v0_0, v0_0));
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            tempmv547[0] = _mm_cvtss_f32(v0_0);
        }
        //resetMv tempmv550[1];
        float tempmv550[1];
        //setVector ve551 = {VA[-6,7],VB[15],VA[5]};
        //setVector ve552 = {VB[9,8],1.0,VB[10]};
        //dotVectors tempmv550[0] = <ve551,ve552>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(VA[5], VB[15], VA[7], -VA[6]);
            v1_0 = _mm_set_ps(VB[10], 1.0, VB[8], VB[9]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ps(v0_0, _mm_movehl_ps(v0_0, v0_0));
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            tempmv550[0] = _mm_cvtss_f32(v0_0);
        }
        //setVector ve553 = {tempmv541[0],tempmv544[0],VB[8,-9,10],tempmv547[0],tempmv550[0]};
        //setVector ve554 = {VC[9,8,7,6,5,10,0]};
        //dotVectors combined_motor[15] = <ve553,ve554>;
        {
            __m128 v0_0, v1_0, v0_1, v1_1;
            v0_0 = _mm_set_ps(-VB[9], VB[8], tempmv544[0], tempmv541[0]);
            v1_0 = _mm_set_ps(VC[6], VC[7], VC[8], VC[9]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_1 = _mm_set_ps(0.0, tempmv550[0], tempmv547[0], VB[10]);
            v1_1 = _mm_set_ps(0.0, VC[0], VC[10], VC[5]);
            v0_1 = _mm_mul_ps(v0_1, v1_1);
            v0_0 = _mm_add_ps(v0_0, v0_1);
            v0_0 = _mm_add_ps(v0_0, _mm_movehl_ps(v0_0, v0_0));
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            combined_motor[15] = _mm_cvtss_f32(v0_0);
        }
        //resetMv motor_norm[16];
        //resetMv tempmv555[1];
        float tempmv555[1];
        //setVector ve556 = {combined_motor[9,8,10,0]};
        //setVector ve557 = {combined_motor[9,8,10,0]};
        //dotVectors tempmv555[0] = <ve556,ve557>;
        {
            __m128 v0_0, v1_0;
            v0_0 = _mm_set_ps(combined_motor[0], combined_motor[10], combined_motor[8], combined_motor[9]);
            v1_0 = _mm_set_ps(combined_motor[0], combined_motor[10], combined_motor[8], combined_motor[9]);
            v0_0 = _mm_mul_ps(v0_0, v1_0);
            v0_0 = _mm_add_ps(v0_0, _mm_movehl_ps(v0_0, v0_0));
            v0_0 = _mm_add_ss(v0_0, _mm_movehdup_ps(v0_0));
            tempmv555[0] = _mm_cvtss_f32(v0_0);
        }
        //resetMv tempmv558[1];
        float tempmv558[1];
        //setMv tempmv558[0] = tempmv555[0];
        tempmv558[0] = tempmv555[0];
        //calculateMvCoeff motor_norm[0] = SQRT(tempmv558);
        motor_norm[0] = sqrt(tempmv558[0]);
        //resetMv out_motor[16];
        //resetMv tempmv559[1];
        float tempmv559[1];
        //setMv tempmv559[0] = combined_motor[0];
        tempmv559[0] = combined_motor[0];
        //resetMv tempmv560[1];
        float tempmv560[1];
        //setMv tempmv560[0] = motor_norm[0];
        tempmv560[0] = motor_norm[0];
        //calculateMvCoeff out_motor[0] = DIVISION(tempmv559,tempmv560);
        out_motor[0] = tempmv559[0] / tempmv560[0];
        //resetMv tempmv561[1];
        float tempmv561[1];
        //setMv tempmv561[0] = combined_motor[5];
        tempmv561[0] = combined_motor[5];
        //resetMv tempmv562[1];
        float tempmv562[1];
        //setMv tempmv562[0] = motor_norm[0];
        tempmv562[0] = motor_norm[0];
        //calculateMvCoeff out_motor[5] = DIVISION(tempmv561,tempmv562);
        out_motor[5] = tempmv561[0] / tempmv562[0];
        //resetMv tempmv563[1];
        float tempmv563[1];
        //setMv tempmv563[0] = combined_motor[6];
        tempmv563[0] = combined_motor[6];
        //resetMv tempmv564[1];
        float tempmv564[1];
        //setMv tempmv564[0] = motor_norm[0];
        tempmv564[0] = motor_norm[0];
        //calculateMvCoeff out_motor[6] = DIVISION(tempmv563,tempmv564);
        out_motor[6] = tempmv563[0] / tempmv564[0];
        //resetMv tempmv565[1];
        float tempmv565[1];
        //setMv tempmv565[0] = combined_motor[7];
        tempmv565[0] = combined_motor[7];
        //resetMv tempmv566[1];
        float tempmv566[1];
        //setMv tempmv566[0] = motor_norm[0];
        tempmv566[0] = motor_norm[0];
        //calculateMvCoeff out_motor[7] = DIVISION(tempmv565,tempmv566);
        out_motor[7] = tempmv565[0] / tempmv566[0];
        //resetMv tempmv567[1];
        float tempmv567[1];
        //setMv tempmv567[0] = combined_motor[8];
        tempmv567[0] = combined_motor[8];
        //resetMv tempmv568[1];
        float tempmv568[1];
        //setMv tempmv568[0] = motor_norm[0];
        tempmv568[0] = motor_norm[0];
        //calculateMvCoeff out_motor[8] = DIVISION(tempmv567,tempmv568);
        out_motor[8] = tempmv567[0] / tempmv568[0];
        //resetMv tempmv569[1];
        float tempmv569[1];
        //setMv tempmv569[0] = combined_motor[9];
        tempmv569[0] = combined_motor[9];
        //resetMv tempmv570[1];
        float tempmv570[1];
        //setMv tempmv570[0] = motor_norm[0];
        tempmv570[0] = motor_norm[0];
        //calculateMvCoeff out_motor[9] = DIVISION(tempmv569,tempmv570);
        out_motor[9] = tempmv569[0] / tempmv570[0];
        //resetMv tempmv571[1];
        float tempmv571[1];
        //setMv tempmv571[0] = combined_motor[10];
        tempmv571[0] = combined_motor[10];
        //resetMv tempmv572[1];
        float tempmv572[1];
        //setMv tempmv572[0] = motor_norm[0];
        tempmv572[0] = motor_norm[0];
        //calculateMvCoeff out_motor[10] = DIVISION(tempmv571,tempmv572);
        out_motor[10] = tempmv571[0] / tempmv572[0];
        //resetMv tempmv573[1];
        float tempmv573[1];
        //setMv tempmv573[0] = combined_motor[15];
        tempmv573[0] = combined_motor[15];
        //resetMv tempmv574[1];
        float tempmv574[1];
        //setMv tempmv574[0] = motor_norm[0];
        tempmv574[0] = motor_norm[0];
        //calculateMvCoeff out_motor[15] = DIVISION(tempmv573,tempmv574);
        out_motor[15] = tempmv573[0] / tempmv574[0];
    }

    // Convert the multivector to a motor
    outputMotor.data[0] = out_motor[0];
    outputMotor.data[1] = out_motor[5];
    outputMotor.data[2] = out_motor[6];
    outputMotor.data[3] = out_motor[7];
    outputMotor.data[4] = out_motor[8];
    outputMotor.data[5] = out_motor[9];
    outputMotor.data[6] = out_motor[10];
    outputMotor.data[7] = out_motor[15];
}

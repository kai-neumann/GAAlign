//
// Created by Kai on 18.01.2022.
//

#include "motor_estimation.h"

void gaalign::estimateMotorFromThreeCorrespondences(const std::vector<std::pair<Eigen::Vector3d, Eigen::Vector3d>>& correspondences, Motor& outputMotor) {
    // Check if there are exactly three correspondences
    if(correspondences.size() != 3) {
        std::cerr << "Unable to estimate motor from a different number of correspondences than 3!" << std::endl;
        throw std::runtime_error("Invalid arguments for 'estimateMotorFromThreeCorrespondences'. Requires exactly three correspondences!");
    }

    double calculatedMotor[8] = {0.0};

    // Convert the points into arrays that can be accessed
    double A_src_arr[4] = {correspondences[0].first.x(), correspondences[0].first.y(), correspondences[0].first.z(), 1.0};
    double B_src_arr[4] = {correspondences[1].first.x(), correspondences[1].first.y(), correspondences[1].first.z(), 1.0};
    double C_src_arr[4] = {correspondences[2].first.x(), correspondences[2].first.y(), correspondences[2].first.z(), 1.0};
    double A_tar_arr[4] = {correspondences[0].second.x(), correspondences[0].second.y(), correspondences[0].second.z(), 1.0};
    double B_tar_arr[4] = {correspondences[1].second.x(), correspondences[1].second.y(), correspondences[1].second.z(), 1.0};
    double C_tar_arr[4] = {correspondences[2].second.x(), correspondences[2].second.y(), correspondences[2].second.z(), 1.0};

#pragma gpc begin
    A_src = mv_from_array(A_src_arr, e0^e3^e2, e0^e1^e3, e0^e2^e1, e1^e2^e3);
    B_src = mv_from_array(B_src_arr, e0^e3^e2, e0^e1^e3, e0^e2^e1, e1^e2^e3);
    C_src = mv_from_array(C_src_arr, e0^e3^e2, e0^e1^e3, e0^e2^e1, e1^e2^e3);
    A_tar = mv_from_array(A_tar_arr, e0^e3^e2, e0^e1^e3, e0^e2^e1, e1^e2^e3);
    B_tar = mv_from_array(B_tar_arr, e0^e3^e2, e0^e1^e3, e0^e2^e1, e1^e2^e3);
    C_tar = mv_from_array(C_tar_arr, e0^e3^e2, e0^e1^e3, e0^e2^e1, e1^e2^e3);

#pragma clucalc begin
    // A_src, B_src, C_src, A_tar. B_tar and C_tar are points. Initialize them if you are inside gaalop
    // source points
    //!A_src = createPoint(src1_x, src1_y, src1_z);
    //!B_src = createPoint(src2_x, src2_y, src2_z);
    //!C_src = createPoint(src3_x, src3_y, src3_z);

    // target points
    //!A_tar = createPoint(tar1_x, tar1_y, tar1_z);
    //!B_tar = createPoint(tar2_x, tar2_y, tar2_z);
    //!C_tar = createPoint(tar3_x, tar3_y, tar3_z);

    // Transformation from A_src to A_tar
    // (translation)
    !VA_unnormalized = (1+A_tar/A_src);
    !VA_norm = abs(VA_unnormalized);
    !VA = VA_unnormalized/VA_norm;

    !A2 = VA * A_src * ~VA;
    !B2 = VA * B_src * ~VA;
    !C2 = VA * C_src * ~VA;

    // Transformation from B2 to Bt
    // based on the rotation from the line L2 to L1
    !L1 = *(*A_tar ^ *B_tar);
    !L2 = *(*A_tar ^ *B2);

    !VB_unnormalized = (1+L1/L2);
    !VB_norm = abs(VB_unnormalized);
    !VB = VB_unnormalized/VB_norm;

    !B3 = VB * B2 * ~VB;
    !C3 = VB * C2 * ~VB;

    // Transformation from C3 to Ct
    // based on the rotation of two planes
    !P1 = *(*L1 ^*C_tar);
    !P2 = *(*L1 ^*C3);

    !VC_unnormalized = (1+P1/P2);
    !VC_norm = abs(VC_unnormalized);
    !VC = VC_unnormalized/VC_norm;

    // complete transformation
    !combined_motor = VC * VB * VA;

    // Get the norm
    !motor_norm = abs(combined_motor);

    // Make sure the out motor is normalized
    ?out_motor = combined_motor/motor_norm;
#pragma clucalc end

    // Unpack the motor
    calculatedMotor = mv_to_array(out_motor, 1, e0^e1, e0^e2, e0^e3, e1^e2, e1^e3, e2^e3, e0^e1^e2^e3);

#pragma gpc end


    // Set to output
    for(int i=0; i<8; i++) {
        outputMotor.data[i] = calculatedMotor[i];
    }
}

void gaalign::sampleSubIndices(int vectorSize, int groupSize, std::vector<int>& outArray) {
    // Iterate until the correct size was achieved
    while (outArray.size() < groupSize) {
        // Get a random index
        int index = rand() % vectorSize;

        // If it does not exist already: Add it
        if (std::find(outArray.begin(), outArray.end(), index) == outArray.end()) {
            outArray.push_back(index);
        }
    }
}
